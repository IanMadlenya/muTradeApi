# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Context', [dirname(__file__)])
        except ImportError:
            import _Context
            return _Context
        if fp is not None:
            try:
                _mod = imp.load_module('_Context', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Context = swig_import_helper()
    del swig_import_helper
else:
    import _Context
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Context.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Context.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Context.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Context.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Context.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Context.SwigPyIterator_equal(self, *args)
    def copy(self): return _Context.SwigPyIterator_copy(self)
    def next(self): return _Context.SwigPyIterator_next(self)
    def __next__(self): return _Context.SwigPyIterator___next__(self)
    def previous(self): return _Context.SwigPyIterator_previous(self)
    def advance(self, *args): return _Context.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Context.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Context.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Context.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Context.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Context.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Context.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Context.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class list_trade(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_trade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_trade, name)
    __repr__ = _swig_repr
    def iterator(self): return _Context.list_trade_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Context.list_trade___nonzero__(self)
    def __bool__(self): return _Context.list_trade___bool__(self)
    def __len__(self): return _Context.list_trade___len__(self)
    def pop(self): return _Context.list_trade_pop(self)
    def __getslice__(self, *args): return _Context.list_trade___getslice__(self, *args)
    def __setslice__(self, *args): return _Context.list_trade___setslice__(self, *args)
    def __delslice__(self, *args): return _Context.list_trade___delslice__(self, *args)
    def __delitem__(self, *args): return _Context.list_trade___delitem__(self, *args)
    def __getitem__(self, *args): return _Context.list_trade___getitem__(self, *args)
    def __setitem__(self, *args): return _Context.list_trade___setitem__(self, *args)
    def append(self, *args): return _Context.list_trade_append(self, *args)
    def empty(self): return _Context.list_trade_empty(self)
    def size(self): return _Context.list_trade_size(self)
    def clear(self): return _Context.list_trade_clear(self)
    def swap(self, *args): return _Context.list_trade_swap(self, *args)
    def get_allocator(self): return _Context.list_trade_get_allocator(self)
    def begin(self): return _Context.list_trade_begin(self)
    def end(self): return _Context.list_trade_end(self)
    def rbegin(self): return _Context.list_trade_rbegin(self)
    def rend(self): return _Context.list_trade_rend(self)
    def pop_back(self): return _Context.list_trade_pop_back(self)
    def erase(self, *args): return _Context.list_trade_erase(self, *args)
    def __init__(self, *args): 
        this = _Context.new_list_trade(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Context.list_trade_push_back(self, *args)
    def front(self): return _Context.list_trade_front(self)
    def back(self): return _Context.list_trade_back(self)
    def assign(self, *args): return _Context.list_trade_assign(self, *args)
    def resize(self, *args): return _Context.list_trade_resize(self, *args)
    def insert(self, *args): return _Context.list_trade_insert(self, *args)
    def pop_front(self): return _Context.list_trade_pop_front(self)
    def push_front(self, *args): return _Context.list_trade_push_front(self, *args)
    def remove(self, *args): return _Context.list_trade_remove(self, *args)
    def unique(self): return _Context.list_trade_unique(self)
    def reverse(self): return _Context.list_trade_reverse(self)
    def sort(self): return _Context.list_trade_sort(self)
    def merge(self, *args): return _Context.list_trade_merge(self, *args)
    __swig_destroy__ = _Context.delete_list_trade
    __del__ = lambda self : None;
list_trade_swigregister = _Context.list_trade_swigregister
list_trade_swigregister(list_trade)

Side_BUY = _Context.Side_BUY
Side_SELL = _Context.Side_SELL
Side_BID = _Context.Side_BID
Side_ASK = _Context.Side_ASK
InstrumentType_STOCK = _Context.InstrumentType_STOCK
InstrumentType_FUTURE = _Context.InstrumentType_FUTURE
InstrumentType_OPTION = _Context.InstrumentType_OPTION
OptionType_PUT = _Context.OptionType_PUT
OptionType_CALL = _Context.OptionType_CALL
TimeInForce_DAY = _Context.TimeInForce_DAY
TimeInForce_IOC = _Context.TimeInForce_IOC
TimeInForce_MAX = _Context.TimeInForce_MAX
OrderType_LIMIT = _Context.OrderType_LIMIT
OrderType_MARKET = _Context.OrderType_MARKET
OrderType_STOP_LIMIT = _Context.OrderType_STOP_LIMIT
OrderType_STOP = _Context.OrderType_STOP
OrderType_MAX = _Context.OrderType_MAX
TransactionType_NEW = _Context.TransactionType_NEW
TransactionType_MODIFY = _Context.TransactionType_MODIFY
TransactionType_CANCEL = _Context.TransactionType_CANCEL
TransactionType_MAX = _Context.TransactionType_MAX
OrderStatus_PENDING = _Context.OrderStatus_PENDING
OrderStatus_CONFIRMED = _Context.OrderStatus_CONFIRMED
OrderStatus_FILLED = _Context.OrderStatus_FILLED
OrderStatus_CANCELED = _Context.OrderStatus_CANCELED
OrderStatus_REPLACED = _Context.OrderStatus_REPLACED
OrderStatus_NEW_REJECTED = _Context.OrderStatus_NEW_REJECTED
OrderStatus_CANCEL_REJECTED = _Context.OrderStatus_CANCEL_REJECTED
OrderStatus_REPLACE_REJECTED = _Context.OrderStatus_REPLACE_REJECTED
OrderStatus_FROZEN = _Context.OrderStatus_FROZEN
OrderStatus_MARKET_TO_LIMIT = _Context.OrderStatus_MARKET_TO_LIMIT
OrderStatus_TRIGGERED = _Context.OrderStatus_TRIGGERED
OrderStatus_PARTIALLY_FILLED = _Context.OrderStatus_PARTIALLY_FILLED
OrderStatus_CANCELED_OF_IOC = _Context.OrderStatus_CANCELED_OF_IOC
OrderStatus_RMS_REJECT = _Context.OrderStatus_RMS_REJECT
OrderStatus_MAX = _Context.OrderStatus_MAX
OrderMode_BUY = _Context.OrderMode_BUY
OrderMode_SELL = _Context.OrderMode_SELL
OrderMode_MAX = _Context.OrderMode_MAX
ResponseType_SUCCESS = _Context.ResponseType_SUCCESS
ResponseType_FAILURE = _Context.ResponseType_FAILURE
ResponseType_TERMINATE_SUCCESS = _Context.ResponseType_TERMINATE_SUCCESS
ResponseType_TERMINATE_FAILURE = _Context.ResponseType_TERMINATE_FAILURE
ResponseType_TERMINATE_SQUAREOFF_SUCCESS = _Context.ResponseType_TERMINATE_SQUAREOFF_SUCCESS
ResponseType_TERMINATE_SQUAREOFF_FAILURE = _Context.ResponseType_TERMINATE_SQUAREOFF_FAILURE
ResponseType_PAUSE_STRATEGY_SUCCESS = _Context.ResponseType_PAUSE_STRATEGY_SUCCESS
ResponseType_PAUSE_STRATEGY_FAILURE = _Context.ResponseType_PAUSE_STRATEGY_FAILURE
ResponseType_STRATEGY_RUNNING = _Context.ResponseType_STRATEGY_RUNNING
ResponseType_TERMINATE_SPREAD_BREACHED = _Context.ResponseType_TERMINATE_SPREAD_BREACHED
ResponseType_ALGO_NOT_ALLOWED = _Context.ResponseType_ALGO_NOT_ALLOWED
ResponseType_MAX = _Context.ResponseType_MAX

def longToString(*args):
  return _Context.longToString(*args)
longToString = _Context.longToString
class ExecutionReport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecutionReport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExecutionReport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """mutrade::ExecutionReport::ExecutionReport(const char *buf) """
        this = _Context.new_ExecutionReport(*args)
        try: self.this.append(this)
        except: self.this = this
    def initialize(self):
        """
        void
        mutrade::ExecutionReport::initialize() 
        """
        return _Context.ExecutionReport_initialize(self)

    def getClOrderId(self):
        """
        Int64
        mutrade::ExecutionReport::getClOrderId() const 
        """
        return _Context.ExecutionReport_getClOrderId(self)

    def getExchangeOrderId(self):
        """Int64 mutrade::ExecutionReport::getExchangeOrderId() const """
        return _Context.ExecutionReport_getExchangeOrderId(self)

    def getSymbolId(self):
        """
        Int64
        mutrade::ExecutionReport::getSymbolId() const 
        """
        return _Context.ExecutionReport_getSymbolId(self)

    def getLastFillQuantity(self):
        """Int32 mutrade::ExecutionReport::getLastFillQuantity() const """
        return _Context.ExecutionReport_getLastFillQuantity(self)

    def getLastFillPrice(self):
        """Int32 mutrade::ExecutionReport::getLastFillPrice() const """
        return _Context.ExecutionReport_getLastFillPrice(self)

    def getExchangeEntryTime(self):
        """Int32 mutrade::ExecutionReport::getExchangeEntryTime() const """
        return _Context.ExecutionReport_getExchangeEntryTime(self)

    def getExchangeModifyTime(self):
        """Int32 mutrade::ExecutionReport::getExchangeModifyTime() const """
        return _Context.ExecutionReport_getExchangeModifyTime(self)

    def getStrategyId(self):
        """
        Int32
        mutrade::ExecutionReport::getStrategyId() const 
        """
        return _Context.ExecutionReport_getStrategyId(self)

    def getClientId(self):
        """
        Int32
        mutrade::ExecutionReport::getClientId() const 
        """
        return _Context.ExecutionReport_getClientId(self)

    def getLimitPrice(self):
        """
        Int32
        mutrade::ExecutionReport::getLimitPrice() const 
        """
        return _Context.ExecutionReport_getLimitPrice(self)

    def getOrderStatus(self):
        """OrderStatus mutrade::ExecutionReport::getOrderStatus() const """
        return _Context.ExecutionReport_getOrderStatus(self)

    def getOrderMode(self):
        """OrderMode mutrade::ExecutionReport::getOrderMode() const """
        return _Context.ExecutionReport_getOrderMode(self)

    def getOrderQuantity(self):
        """Int32 mutrade::ExecutionReport::getOrderQuantity() const """
        return _Context.ExecutionReport_getOrderQuantity(self)

    def getOrderPrice(self):
        """
        Int32
        mutrade::ExecutionReport::getOrderPrice() const 
        """
        return _Context.ExecutionReport_getOrderPrice(self)

    def getIOCCanceledQuantity(self):
        """
        Int32
        mutrade::ExecutionReport::getIOCCanceledQuantity() const 
        """
        return _Context.ExecutionReport_getIOCCanceledQuantity(self)

    def getOriginalClOrderId(self):
        """Int64 mutrade::ExecutionReport::getOriginalClOrderId() const """
        return _Context.ExecutionReport_getOriginalClOrderId(self)

    def getConfirmationTimeSeconds(self):
        """
        Int64
        mutrade::ExecutionReport::getConfirmationTimeSeconds() const 
        """
        return _Context.ExecutionReport_getConfirmationTimeSeconds(self)

    def getConfirmationTimeMicroSeconds(self):
        """
        Int64
        mutrade::ExecutionReport::getConfirmationTimeMicroSeconds() const 
        """
        return _Context.ExecutionReport_getConfirmationTimeMicroSeconds(self)

    def getIsOffline(self):
        """
        UChar
        mutrade::ExecutionReport::getIsOffline() const 
        """
        return _Context.ExecutionReport_getIsOffline(self)

    def getSequenceNumber(self):
        """Int64 mutrade::ExecutionReport::getSequenceNumber() const """
        return _Context.ExecutionReport_getSequenceNumber(self)

    def getTradeId(self):
        """
        Int64
        mutrade::ExecutionReport::getTradeId() const 
        """
        return _Context.ExecutionReport_getTradeId(self)

    def getErrorCode(self):
        """
        Int32
        mutrade::ExecutionReport::getErrorCode() const 
        """
        return _Context.ExecutionReport_getErrorCode(self)

    def getReasonText(self):
        """
        Int32
        mutrade::ExecutionReport::getReasonText() const 
        """
        return _Context.ExecutionReport_getReasonText(self)

    def getUnknownOrder(self):
        """UChar mutrade::ExecutionReport::getUnknownOrder() const """
        return _Context.ExecutionReport_getUnknownOrder(self)

    def getInstrumentName(self):
        """String mutrade::ExecutionReport::getInstrumentName() const """
        return _Context.ExecutionReport_getInstrumentName(self)

    def setClOrderId(self, *args):
        """
        void
        mutrade::ExecutionReport::setClOrderId(Int64 clOrderId) 
        """
        return _Context.ExecutionReport_setClOrderId(self, *args)

    def setExchangeOrderId(self, *args):
        """
        void mutrade::ExecutionReport::setExchangeOrderId(Int64
        exchangeOrderId) 
        """
        return _Context.ExecutionReport_setExchangeOrderId(self, *args)

    def setSymbolId(self, *args):
        """
        void
        mutrade::ExecutionReport::setSymbolId(Int64 symbolId) 
        """
        return _Context.ExecutionReport_setSymbolId(self, *args)

    def setLastFillQuantity(self, *args):
        """void mutrade::ExecutionReport::setLastFillQuantity(Int32 qty) """
        return _Context.ExecutionReport_setLastFillQuantity(self, *args)

    def setLastFillPrice(self, *args):
        """void mutrade::ExecutionReport::setLastFillPrice(Int32 price) """
        return _Context.ExecutionReport_setLastFillPrice(self, *args)

    def setExchangeEntryTime(self, *args):
        """
        void mutrade::ExecutionReport::setExchangeEntryTime(Int32
        exchangeEntryTime) 
        """
        return _Context.ExecutionReport_setExchangeEntryTime(self, *args)

    def setExchangeModifyTime(self, *args):
        """
        void mutrade::ExecutionReport::setExchangeModifyTime(Int32
        exchangeModifyTime) 
        """
        return _Context.ExecutionReport_setExchangeModifyTime(self, *args)

    def setStrategyId(self, *args):
        """
        void
        mutrade::ExecutionReport::setStrategyId(Int32 strategyId) 
        """
        return _Context.ExecutionReport_setStrategyId(self, *args)

    def setClientId(self, *args):
        """
        void
        mutrade::ExecutionReport::setClientId(Int32 clientId) 
        """
        return _Context.ExecutionReport_setClientId(self, *args)

    def setLimitPrice(self, *args):
        """
        void
        mutrade::ExecutionReport::setLimitPrice(Int32 limitPrice) 
        """
        return _Context.ExecutionReport_setLimitPrice(self, *args)

    def setOrderStatus(self, *args):
        """
        void
        mutrade::ExecutionReport::setOrderStatus(OrderStatus orderStatus) 
        """
        return _Context.ExecutionReport_setOrderStatus(self, *args)

    def setOrderMode(self, *args):
        """
        void
        mutrade::ExecutionReport::setOrderMode(OrderMode orderMode) 
        """
        return _Context.ExecutionReport_setOrderMode(self, *args)

    def setOrderQuantity(self, *args):
        """void mutrade::ExecutionReport::setOrderQuantity(Int32 quantity) """
        return _Context.ExecutionReport_setOrderQuantity(self, *args)

    def setOrderPrice(self, *args):
        """
        void
        mutrade::ExecutionReport::setOrderPrice(Int32 price) 
        """
        return _Context.ExecutionReport_setOrderPrice(self, *args)

    def setIOCCanceledQuantity(self, *args):
        """
        void
        mutrade::ExecutionReport::setIOCCanceledQuantity(Int32 quantity) 
        """
        return _Context.ExecutionReport_setIOCCanceledQuantity(self, *args)

    def setOriginalClOrderId(self, *args):
        """
        void mutrade::ExecutionReport::setOriginalClOrderId(Int64
        originalClOrderId) 
        """
        return _Context.ExecutionReport_setOriginalClOrderId(self, *args)

    def setConfirmationTimeSeconds(self, *args):
        """
        void
        mutrade::ExecutionReport::setConfirmationTimeSeconds(Int64 seconds) 
        """
        return _Context.ExecutionReport_setConfirmationTimeSeconds(self, *args)

    def setConfirmationTimeMicroSeconds(self, *args):
        """
        void
        mutrade::ExecutionReport::setConfirmationTimeMicroSeconds(Int64
        microSeconds) 
        """
        return _Context.ExecutionReport_setConfirmationTimeMicroSeconds(self, *args)

    def setIsOffline(self, *args):
        """
        void
        mutrade::ExecutionReport::setIsOffline(UChar isOffline) 
        """
        return _Context.ExecutionReport_setIsOffline(self, *args)

    def setSequenceNumber(self, *args):
        """
        void mutrade::ExecutionReport::setSequenceNumber(Int64 sequenceNumber)

        """
        return _Context.ExecutionReport_setSequenceNumber(self, *args)

    def setTradeId(self, *args):
        """
        void
        mutrade::ExecutionReport::setTradeId(Int64 tradeId) 
        """
        return _Context.ExecutionReport_setTradeId(self, *args)

    def setErrorCode(self, *args):
        """
        void
        mutrade::ExecutionReport::setErrorCode(Int32 errorCode) 
        """
        return _Context.ExecutionReport_setErrorCode(self, *args)

    def setReasonText(self, *args):
        """
        void
        mutrade::ExecutionReport::setReasonText(Int32 reasonText) 
        """
        return _Context.ExecutionReport_setReasonText(self, *args)

    def setUnknownOrder(self, *args):
        """void mutrade::ExecutionReport::setUnknownOrder(UChar unknownOrder) """
        return _Context.ExecutionReport_setUnknownOrder(self, *args)

    def setInstrumentName(self, *args):
        """
        void mutrade::ExecutionReport::setInstrumentName(String
        instrumentName) 
        """
        return _Context.ExecutionReport_setInstrumentName(self, *args)

    def dump(self):
        """
        void
        mutrade::ExecutionReport::dump() 
        """
        return _Context.ExecutionReport_dump(self)

    def dumpCSV(self, *args):
        """
        void
        mutrade::ExecutionReport::dumpCSV(std::ofstream &csvFile) 
        """
        return _Context.ExecutionReport_dumpCSV(self, *args)

    def serialize(self, *args):
        """
        int
        mutrade::ExecutionReport::serialize(char *buf) 
        """
        return _Context.ExecutionReport_serialize(self, *args)

    __swig_destroy__ = _Context.delete_ExecutionReport
    __del__ = lambda self : None;
ExecutionReport_swigregister = _Context.ExecutionReport_swigregister
ExecutionReport_swigregister(ExecutionReport)

class ExecutionResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecutionResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExecutionResponse, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """mutrade::ExecutionResponse::ExecutionResponse(const char *buf) """
        this = _Context.new_ExecutionResponse(*args)
        try: self.this.append(this)
        except: self.this = this
    def dump(self):
        """
        void
        mutrade::ExecutionResponse::dump() 
        """
        return _Context.ExecutionResponse_dump(self)

    def getClOrderId(self):
        """UInt64 mutrade::ExecutionResponse::getClOrderId() const """
        return _Context.ExecutionResponse_getClOrderId(self)

    def getTransactionType(self):
        """UChar mutrade::ExecutionResponse::getTransactionType() const """
        return _Context.ExecutionResponse_getTransactionType(self)

    def getResponseType(self):
        """UChar mutrade::ExecutionResponse::getResponseType() const """
        return _Context.ExecutionResponse_getResponseType(self)

    def getTokenId(self):
        """
        UInt32
        mutrade::ExecutionResponse::getTokenId() const 
        """
        return _Context.ExecutionResponse_getTokenId(self)

    def setClOrderId(self, *args):
        """
        void
        mutrade::ExecutionResponse::setClOrderId(UInt64 clOrderId) 
        """
        return _Context.ExecutionResponse_setClOrderId(self, *args)

    def setTransactionType(self, *args):
        """
        void mutrade::ExecutionResponse::setTransactionType(UChar
        transactionType) 
        """
        return _Context.ExecutionResponse_setTransactionType(self, *args)

    def setResponseType(self, *args):
        """
        void mutrade::ExecutionResponse::setResponseType(UChar responseType)

        """
        return _Context.ExecutionResponse_setResponseType(self, *args)

    def setTokenId(self, *args):
        """
        void
        mutrade::ExecutionResponse::setTokenId(UInt32 val) 
        """
        return _Context.ExecutionResponse_setTokenId(self, *args)

    __swig_destroy__ = _Context.delete_ExecutionResponse
    __del__ = lambda self : None;
ExecutionResponse_swigregister = _Context.ExecutionResponse_swigregister
ExecutionResponse_swigregister(ExecutionResponse)

INFO = _Context.INFO
WARN = _Context.WARN
ERROR_ = _Context.ERROR_
FATAL = _Context.FATAL
class AbstractLogger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractLogger, name)
    __repr__ = _swig_repr
    def log(self, *args):
        """
        virtual void
        mutrade::AbstractLogger::log(LogLevel level, const std::string
        &message)=0 
        """
        return _Context.AbstractLogger_log(self, *args)

    def getLevel(self, *args):
        """
        virtual int
        mutrade::AbstractLogger::getLevel(LogLevel level)=0 
        """
        return _Context.AbstractLogger_getLevel(self, *args)

    def setLogLevel(self, *args):
        """
        void
        mutrade::AbstractLogger::setLogLevel(LogLevel level) 
        """
        return _Context.AbstractLogger_setLogLevel(self, *args)

    def getLogLevel(self):
        """
        int
        mutrade::AbstractLogger::getLogLevel() 
        """
        return _Context.AbstractLogger_getLogLevel(self)

    def __init__(self): 
        if self.__class__ == AbstractLogger:
            _self = None
        else:
            _self = self
        this = _Context.new_AbstractLogger(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Context.delete_AbstractLogger
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _Context.disown_AbstractLogger(self)
        return weakref_proxy(self)
AbstractLogger_swigregister = _Context.AbstractLogger_swigregister
AbstractLogger_swigregister(AbstractLogger)

class Logger(_object):
    """
    Abstract Logger class.

    Singleton Logging class.

    This is the class which should be used in code to use the logging
    functionality. The parameters to be used in the log function, must
    have stream operators available.

    C++ includes: logger.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getInstance"] = lambda x: _Context.Logger_getInstance
    if _newclass:getInstance = staticmethod(_Context.Logger_getInstance)
    def setLogLevel(self, *args):
        """
        void
        mutrade::Logger::setLogLevel(LogLevel level) 
        """
        return _Context.Logger_setLogLevel(self, *args)

    def log(self, *args):
        """
        void
        mutrade::Logger::log(LogLevel level, const std::string &message, const
        T1 &param1, const T2 &param2, const T3 &param3, const T4 &param4,
        const T5 &param5) 
        """
        return _Context.Logger_log(self, *args)

    __swig_destroy__ = _Context.delete_Logger
    __del__ = lambda self : None;
Logger_swigregister = _Context.Logger_swigregister
Logger_swigregister(Logger)

def Logger_getInstance():
  return _Context.Logger_getInstance()
Logger_getInstance = _Context.Logger_getInstance

class Order(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Order, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Order, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        mutrade::Order::Order()

        """
        this = _Context.new_Order()
        try: self.this.append(this)
        except: self.this = this
    def getClientId(self):
        """
        Int32
        mutrade::Order::getClientId() const 
        """
        return _Context.Order_getClientId(self)

    def getTransactionType(self):
        """TransactionType mutrade::Order::getTransactionType() const """
        return _Context.Order_getTransactionType(self)

    def getClOrdId(self):
        """
        Int64
        mutrade::Order::getClOrdId() const 
        """
        return _Context.Order_getClOrdId(self)

    def getOrigClOrdId(self):
        """
        Int64
        mutrade::Order::getOrigClOrdId() const 
        """
        return _Context.Order_getOrigClOrdId(self)

    def getExchangeOrderId(self):
        """
        String
        mutrade::Order::getExchangeOrderId() const 
        """
        return _Context.Order_getExchangeOrderId(self)

    def getSymbol(self):
        """
        String
        mutrade::Order::getSymbol() const 
        """
        return _Context.Order_getSymbol(self)

    def getOrderMode(self):
        """
        Side
        mutrade::Order::getOrderMode() const 
        """
        return _Context.Order_getOrderMode(self)

    def getQuantity(self):
        """
        Int32
        mutrade::Order::getQuantity() const 
        """
        return _Context.Order_getQuantity(self)

    def getDisclosedQuantity(self):
        """
        Int32
        mutrade::Order::getDisclosedQuantity() const 
        """
        return _Context.Order_getDisclosedQuantity(self)

    def getFilledQuantity(self):
        """
        Int32
        mutrade::Order::getFilledQuantity() const 
        """
        return _Context.Order_getFilledQuantity(self)

    def getOldQuantity(self):
        """
        Int32
        mutrade::Order::getOldQuantity() const 
        """
        return _Context.Order_getOldQuantity(self)

    def getPrice(self):
        """
        Int32
        mutrade::Order::getPrice() const 
        """
        return _Context.Order_getPrice(self)

    def getStopPrice(self):
        """
        Int32
        mutrade::Order::getStopPrice() const 
        """
        return _Context.Order_getStopPrice(self)

    def getSecurityType(self):
        """InstrumentType mutrade::Order::getSecurityType() const """
        return _Context.Order_getSecurityType(self)

    def getOrderValidity(self):
        """
        TimeInForce
        mutrade::Order::getOrderValidity() const 
        """
        return _Context.Order_getOrderValidity(self)

    def getOrderType(self):
        """
        OrderType
        mutrade::Order::getOrderType() const 
        """
        return _Context.Order_getOrderType(self)

    def getOrderStatus(self):
        """
        OrderStatus
        mutrade::Order::getOrderStatus() const 
        """
        return _Context.Order_getOrderStatus(self)

    def getExchangeEntryTime(self):
        """
        Int32
        mutrade::Order::getExchangeEntryTime() const 
        """
        return _Context.Order_getExchangeEntryTime(self)

    def getExchangeModifyTime(self):
        """
        Int32
        mutrade::Order::getExchangeModifyTime() const 
        """
        return _Context.Order_getExchangeModifyTime(self)

    def setClientId(self, *args):
        """
        void
        mutrade::Order::setClientId(Int32 val) 
        """
        return _Context.Order_setClientId(self, *args)

    def setTransactionType(self, *args):
        """
        void
        mutrade::Order::setTransactionType(TransactionType val) 
        """
        return _Context.Order_setTransactionType(self, *args)

    def setClOrdId(self, *args):
        """
        void
        mutrade::Order::setClOrdId(Int64 val) 
        """
        return _Context.Order_setClOrdId(self, *args)

    def setOrigClOrdId(self, *args):
        """
        void
        mutrade::Order::setOrigClOrdId(Int64 val) 
        """
        return _Context.Order_setOrigClOrdId(self, *args)

    def setExchangeOrderId(self, *args):
        """
        void
        mutrade::Order::setExchangeOrderId(String val) 
        """
        return _Context.Order_setExchangeOrderId(self, *args)

    def setSymbol(self, *args):
        """
        void
        mutrade::Order::setSymbol(String val) 
        """
        return _Context.Order_setSymbol(self, *args)

    def setOrderMode(self, *args):
        """
        void
        mutrade::Order::setOrderMode(Side val) 
        """
        return _Context.Order_setOrderMode(self, *args)

    def setQuantity(self, *args):
        """
        void
        mutrade::Order::setQuantity(Int32 val) 
        """
        return _Context.Order_setQuantity(self, *args)

    def setDisclosedQuantity(self, *args):
        """
        void
        mutrade::Order::setDisclosedQuantity(Int32 val) 
        """
        return _Context.Order_setDisclosedQuantity(self, *args)

    def setFilledQuantity(self, *args):
        """
        void
        mutrade::Order::setFilledQuantity(Int32 val) 
        """
        return _Context.Order_setFilledQuantity(self, *args)

    def setOldQuantity(self, *args):
        """
        void
        mutrade::Order::setOldQuantity(Int32 val) 
        """
        return _Context.Order_setOldQuantity(self, *args)

    def setPrice(self, *args):
        """
        void
        mutrade::Order::setPrice(Int32 val) 
        """
        return _Context.Order_setPrice(self, *args)

    def setStopPrice(self, *args):
        """
        void
        mutrade::Order::setStopPrice(Int32 val) 
        """
        return _Context.Order_setStopPrice(self, *args)

    def setSecurityType(self, *args):
        """
        void
        mutrade::Order::setSecurityType(InstrumentType val) 
        """
        return _Context.Order_setSecurityType(self, *args)

    def setOrderValidity(self, *args):
        """
        void
        mutrade::Order::setOrderValidity(TimeInForce val) 
        """
        return _Context.Order_setOrderValidity(self, *args)

    def setOrderType(self, *args):
        """
        void
        mutrade::Order::setOrderType(OrderType val) 
        """
        return _Context.Order_setOrderType(self, *args)

    def setOrderStatus(self, *args):
        """
        void
        mutrade::Order::setOrderStatus(OrderStatus val) 
        """
        return _Context.Order_setOrderStatus(self, *args)

    def setExchangeEntryTime(self, *args):
        """
        void
        mutrade::Order::setExchangeEntryTime(Int32 val) 
        """
        return _Context.Order_setExchangeEntryTime(self, *args)

    def setExchangeModifyTime(self, *args):
        """
        void
        mutrade::Order::setExchangeModifyTime(Int32 val) 
        """
        return _Context.Order_setExchangeModifyTime(self, *args)

    def initialize(self):
        """
        void
        mutrade::Order::initialize() 
        """
        return _Context.Order_initialize(self)

    def dumpOrder(self):
        """
        void
        mutrade::Order::dumpOrder() const 
        """
        return _Context.Order_dumpOrder(self)

    __swig_destroy__ = _Context.delete_Order
    __del__ = lambda self : None;
Order_swigregister = _Context.Order_swigregister
Order_swigregister(Order)

class Instrument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instrument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Instrument, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        mutrade::Instrument::Instrument(const std::string &identifier)

        Create an instrument from string identifier. 
        """
        this = _Context.new_Instrument(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstrumentType(self):
        """
        InstrumentType mutrade::Instrument::getInstrumentType() const

        Get Type of instrument (STOCK/FUTURE/OPTION). 
        """
        return _Context.Instrument_getInstrumentType(self)

    def getStrikePrice(self):
        """
        Int64
        mutrade::Instrument::getStrikePrice() const

        Get Expiry Date of the instrument (for FUTURE/OPTION).

        Get Strike Price of the option (for OPTIONs) 
        """
        return _Context.Instrument_getStrikePrice(self)

    def getSeries(self):
        """
        String
        mutrade::Instrument::getSeries() const

        Get Series of instrument. 
        """
        return _Context.Instrument_getSeries(self)

    def getLotSize(self):
        """
        Int32
        mutrade::Instrument::getLotSize() const

        Get Lot Size of the instrument (for FUTURE/OPTION). 
        """
        return _Context.Instrument_getLotSize(self)

    def getTickSize(self):
        """
        Int32
        mutrade::Instrument::getTickSize() const

        Get Tick Size for instrument. 
        """
        return _Context.Instrument_getTickSize(self)

    def getOptionType(self):
        """
        OptionType
        mutrade::Instrument::getOptionType() const

        Get Type of the option - CALL / PUT (for OPTIONs). 
        """
        return _Context.Instrument_getOptionType(self)

    def __lt__(self, *args): return _Context.Instrument___lt__(self, *args)
    def __eq__(self, *args): return _Context.Instrument___eq__(self, *args)
    def getInstrumentName(self):
        """
        String
        mutrade::Instrument::getInstrumentName()

        Get Instrument name as string. 
        """
        return _Context.Instrument_getInstrumentName(self)

    __swig_destroy__ = _Context.delete_Instrument
    __del__ = lambda self : None;
Instrument_swigregister = _Context.Instrument_swigregister
Instrument_swigregister(Instrument)

class Quote(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quote, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quote, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """mutrade::Quote::Quote(const Quote &) """
        this = _Context.new_Quote(*args)
        try: self.this.append(this)
        except: self.this = this
    def setSymbolId(self, *args):
        """
        void
        mutrade::Quote::setSymbolId(Int64 val) 
        """
        return _Context.Quote_setSymbolId(self, *args)

    def setNummberOfTrades(self, *args):
        """
        void
        mutrade::Quote::setNummberOfTrades(Int64 val) 
        """
        return _Context.Quote_setNummberOfTrades(self, *args)

    def setVolume(self, *args):
        """
        void
        mutrade::Quote::setVolume(Int64 val) 
        """
        return _Context.Quote_setVolume(self, *args)

    def setValue(self, *args):
        """
        void
        mutrade::Quote::setValue(Int64 val) 
        """
        return _Context.Quote_setValue(self, *args)

    def setLastTradePrice(self, *args):
        """
        void
        mutrade::Quote::setLastTradePrice(Int64 val) 
        """
        return _Context.Quote_setLastTradePrice(self, *args)

    def setLastTradeQty(self, *args):
        """
        void
        mutrade::Quote::setLastTradeQty(Int64 val) 
        """
        return _Context.Quote_setLastTradeQty(self, *args)

    def setOpenPrice(self, *args):
        """
        void
        mutrade::Quote::setOpenPrice(Int64 val) 
        """
        return _Context.Quote_setOpenPrice(self, *args)

    def setClosePrice(self, *args):
        """
        void
        mutrade::Quote::setClosePrice(Int64 val) 
        """
        return _Context.Quote_setClosePrice(self, *args)

    def setHighPrice(self, *args):
        """
        void
        mutrade::Quote::setHighPrice(Int64 val) 
        """
        return _Context.Quote_setHighPrice(self, *args)

    def setLowPrice(self, *args):
        """
        void
        mutrade::Quote::setLowPrice(Int64 val) 
        """
        return _Context.Quote_setLowPrice(self, *args)

    def setTotalBidQty(self, *args):
        """
        void
        mutrade::Quote::setTotalBidQty(Int64 val) 
        """
        return _Context.Quote_setTotalBidQty(self, *args)

    def setTotalAskQty(self, *args):
        """
        void
        mutrade::Quote::setTotalAskQty(Int64 val) 
        """
        return _Context.Quote_setTotalAskQty(self, *args)

    def setLowerCktLimit(self, *args):
        """
        void
        mutrade::Quote::setLowerCktLimit(Int64 val) 
        """
        return _Context.Quote_setLowerCktLimit(self, *args)

    def setUpperCktLimit(self, *args):
        """
        void
        mutrade::Quote::setUpperCktLimit(Int64 val) 
        """
        return _Context.Quote_setUpperCktLimit(self, *args)

    def setDepth(self, *args):
        """
        void
        mutrade::Quote::setDepth(UChar val) 
        """
        return _Context.Quote_setDepth(self, *args)

    def setBidPrice(self, *args):
        """
        void
        mutrade::Quote::setBidPrice(Int64 val[]) 
        """
        return _Context.Quote_setBidPrice(self, *args)

    def setBidQty(self, *args):
        """
        void
        mutrade::Quote::setBidQty(Int64 val[]) 
        """
        return _Context.Quote_setBidQty(self, *args)

    def setAskPrice(self, *args):
        """
        void
        mutrade::Quote::setAskPrice(Int64 val[]) 
        """
        return _Context.Quote_setAskPrice(self, *args)

    def setAskQty(self, *args):
        """
        void
        mutrade::Quote::setAskQty(Int64 val[]) 
        """
        return _Context.Quote_setAskQty(self, *args)

    def getSymbolId(self):
        """
        Int64
        mutrade::Quote::getSymbolId() const 
        """
        return _Context.Quote_getSymbolId(self)

    def getNumberOfTrades(self):
        """
        Int64
        mutrade::Quote::getNumberOfTrades() const 
        """
        return _Context.Quote_getNumberOfTrades(self)

    def getVolume(self):
        """
        Int64
        mutrade::Quote::getVolume() const 
        """
        return _Context.Quote_getVolume(self)

    def getValue(self):
        """
        Int64
        mutrade::Quote::getValue() const 
        """
        return _Context.Quote_getValue(self)

    def getLastTradePrice(self):
        """
        Int64
        mutrade::Quote::getLastTradePrice() const 
        """
        return _Context.Quote_getLastTradePrice(self)

    def getLastTradeQty(self):
        """
        Int64
        mutrade::Quote::getLastTradeQty() const 
        """
        return _Context.Quote_getLastTradeQty(self)

    def getOpenPrice(self):
        """
        Int64
        mutrade::Quote::getOpenPrice() const 
        """
        return _Context.Quote_getOpenPrice(self)

    def getClosePrice(self):
        """
        Int64
        mutrade::Quote::getClosePrice() const 
        """
        return _Context.Quote_getClosePrice(self)

    def getHighPrice(self):
        """
        Int64
        mutrade::Quote::getHighPrice() const 
        """
        return _Context.Quote_getHighPrice(self)

    def getLowPrice(self):
        """
        Int64
        mutrade::Quote::getLowPrice() const 
        """
        return _Context.Quote_getLowPrice(self)

    def getTotalBidQty(self):
        """
        Int64
        mutrade::Quote::getTotalBidQty() const 
        """
        return _Context.Quote_getTotalBidQty(self)

    def getTotalAskQty(self):
        """
        Int64
        mutrade::Quote::getTotalAskQty() const 
        """
        return _Context.Quote_getTotalAskQty(self)

    def getLowerCktLimit(self):
        """
        Int64
        mutrade::Quote::getLowerCktLimit() const 
        """
        return _Context.Quote_getLowerCktLimit(self)

    def getUpperCktLimit(self):
        """
        Int64
        mutrade::Quote::getUpperCktLimit() const 
        """
        return _Context.Quote_getUpperCktLimit(self)

    def getDepth(self):
        """
        UChar
        mutrade::Quote::getDepth() const 
        """
        return _Context.Quote_getDepth(self)

    def getBidPrice(self):
        """
        Int64*
        mutrade::Quote::getBidPrice() 
        """
        return _Context.Quote_getBidPrice(self)

    def getBidQty(self):
        """
        Int64*
        mutrade::Quote::getBidQty() 
        """
        return _Context.Quote_getBidQty(self)

    def getAskPrice(self):
        """
        Int64*
        mutrade::Quote::getAskPrice() 
        """
        return _Context.Quote_getAskPrice(self)

    def getAskQty(self):
        """
        Int64*
        mutrade::Quote::getAskQty() 
        """
        return _Context.Quote_getAskQty(self)

    __swig_destroy__ = _Context.delete_Quote
    __del__ = lambda self : None;
Quote_swigregister = _Context.Quote_swigregister
Quote_swigregister(Quote)

class MarketData(_object):
    """
    MarketData Class.

    C++ includes: marketdata.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarketData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """mutrade::MarketData::MarketData(const Quote &) """
        this = _Context.new_MarketData(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstrument(self):
        """
        Instrument
        mutrade::MarketData::getInstrument() const 
        """
        return _Context.MarketData_getInstrument(self)

    def getLastPrice(self):
        """
        Int32
        mutrade::MarketData::getLastPrice() const

        Last Traded Price of the Instrument.

        Last Traded Price of the Instrument 
        """
        return _Context.MarketData_getLastPrice(self)

    def getLastQty(self):
        """
        Int32
        mutrade::MarketData::getLastQty() const

        Last Traded Quantity of the Instrument.

        Last Traded Quantity of the Instrument 
        """
        return _Context.MarketData_getLastQty(self)

    def getLastTime(self):
        """
        Int32
        mutrade::MarketData::getLastTime() const

        Time of last trade.

        Time of last trade 
        """
        return _Context.MarketData_getLastTime(self)

    def getTotalQty(self):
        """
        Int32
        mutrade::MarketData::getTotalQty() const

        Total Quantity traded in the day.

        Total Quantity traded in the day. This data may not be provided by all
        the exchanges. 
        """
        return _Context.MarketData_getTotalQty(self)

    def getDepth(self, *args):
        """
        Int32
        mutrade::MarketData::getDepth(Side side) const

        Depth available on Bid/Ask side.

        Depth available on Bid/Ask side 
        """
        return _Context.MarketData_getDepth(self, *args)

    def getPrice(self, *args):
        """
        Int32
        mutrade::MarketData::getPrice(Side side, Int32 rank)

        Get Price available at Rank on Bid/Ask side.

        Get Price available at Rank on Bid/Ask side 
        """
        return _Context.MarketData_getPrice(self, *args)

    def getQty(self, *args):
        """
        Int32
        mutrade::MarketData::getQty(Side side, Int32 rank)

        Get Quantity available at Rank on Bid/Ask side.

        Get Quantity available at Rank on Bid/Ask side 
        """
        return _Context.MarketData_getQty(self, *args)

    def getRank(self, *args):
        """
        Int32
        mutrade::MarketData::getRank(Side side, Int32 price) const

        Get Rank in Market depth for a particular price.

        Get Rank in Market depth for a particular price 
        """
        return _Context.MarketData_getRank(self, *args)

    def getCount(self, *args):
        """
        Boolean
        mutrade::MarketData::getCount(Side side, Int32 rank) const

        get Order count at Bid/Ask side

        Get Order count at Bid/Ask side. This data may not be available for
        all exchanges. 
        """
        return _Context.MarketData_getCount(self, *args)

    def hasQty(self, *args):
        """
        Boolean
        mutrade::MarketData::hasQty(Side side, Int32 qty) const

        Check if a particular qty is available at Bid/Ask side.

        Check if a particular qty is available at Bid/Ask side 
        """
        return _Context.MarketData_hasQty(self, *args)

    def getAvgPrice(self, *args):
        """
        Int32
        mutrade::MarketData::getAvgPrice(Side side, Int32 qty) const

        Get Best average price for a particular quantity.

        Get Best average price available for a particular quantity 
        """
        return _Context.MarketData_getAvgPrice(self, *args)

    def getQtyForAvgPrice(self, *args):
        """
        Int32
        mutrade::MarketData::getQtyForAvgPrice(Side side, Int32 avgPrice)
        const

        Get maximum quantity available at Average Price.

        Get Maximum Quantity which is available on Bid/Ask side at specified
        Average Price or better. 
        """
        return _Context.MarketData_getQtyForAvgPrice(self, *args)

    def getAvgPriceForQty(self, *args):
        """
        Int32
        mutrade::MarketData::getAvgPriceForQty(Side side, Int32 qty) const

        Get average price for a particular quantity.

        Get Average Price for a particular quantity which is available on
        Bid/Ask side 
        """
        return _Context.MarketData_getAvgPriceForQty(self, *args)

    def getQtyForWorstPrice(self, *args):
        """
        Int32 mutrade::MarketData::getQtyForWorstPrice(Side side, Int32
        worstPrice) const

        Get maximum quantity at worstPrice or better.

        Get Maximum Quantity which is available on Bid/Ask side for Worst
        Price or better. 
        """
        return _Context.MarketData_getQtyForWorstPrice(self, *args)

    def getWorstPriceForQty(self, *args):
        """
        Int32 mutrade::MarketData::getWorstPriceForQty(Side side, Int32 qty)
        const

        Get Worst price for a particular quantity.

        Get Worst Price which is available on Bid/Ask side for a particular
        quantity 
        """
        return _Context.MarketData_getWorstPriceForQty(self, *args)

    def getDayOpen(self):
        """
        Int32
        mutrade::MarketData::getDayOpen() const

        Get Day's Open Price.

        Get Day's Open Price 
        """
        return _Context.MarketData_getDayOpen(self)

    def getDayHigh(self):
        """
        Int32
        mutrade::MarketData::getDayHigh() const

        Get Day's High Price.

        Get Day's High Price 
        """
        return _Context.MarketData_getDayHigh(self)

    def getDayLow(self):
        """
        Int32
        mutrade::MarketData::getDayLow() const

        Get Day's Low Price.

        Get Day's Low Price 
        """
        return _Context.MarketData_getDayLow(self)

    def getDayClose(self):
        """
        Int32
        mutrade::MarketData::getDayClose() const

        Get Previous Day's Close Price.

        Get Previous Day's Close Price 
        """
        return _Context.MarketData_getDayClose(self)

    __swig_destroy__ = _Context.delete_MarketData
    __del__ = lambda self : None;
MarketData_swigregister = _Context.MarketData_swigregister
MarketData_swigregister(MarketData)

class Application(_object):
    """
    Abstract Application class, to be overridden by the developer.

    Application is the base abstract class. An application developer,
    using muTrade API needs to inherit from this class and override the
    virtual methods of this class.

    C++ includes: application.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Context.delete_Application
    __del__ = lambda self : None;
    def onTick(self, *args):
        """
        virtual void
        mutrade::Application::onTick(const MarketData &)

        Event called when a tick is received.

        Parameters: 
        """
        return _Context.Application_onTick(self, *args)

    def onLogin(self, *args):
        """
        virtual void
        mutrade::Application::onLogin(bool status)

        Event called when Login message is returned.

        Parameters: 
        """
        return _Context.Application_onLogin(self, *args)

    def onLogout(self, *args):
        """
        virtual void
        mutrade::Application::onLogout(bool status)

        Event called when Logout message is returned.

        Parameters: 
        """
        return _Context.Application_onLogout(self, *args)

    def onExecutionReport(self, *args):
        """
        virtual void mutrade::Application::onExecutionReport(ExecutionReport
        &report)

        Event called when an execution is received from Server.

        Parameters: 
        """
        return _Context.Application_onExecutionReport(self, *args)

    def onLoadInstrumentEnd(self, *args):
        """
        virtual void mutrade::Application::onLoadInstrumentEnd(const String
        instrumentName, bool success)

        Event called when instrument is loaded from the backend.

        Parameters: 
        """
        return _Context.Application_onLoadInstrumentEnd(self, *args)

    def __init__(self): 
        if self.__class__ == Application:
            _self = None
        else:
            _self = self
        this = _Context.new_Application(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _Context.disown_Application(self)
        return weakref_proxy(self)
Application_swigregister = _Context.Application_swigregister
Application_swigregister(Application)

class Context(_object):
    """
    Context class for the algorithm.

    This class contains the event engine for the applicaton and does the
    actual communication with the muTrade server. Application object
    containing the trading logic is associated with this class. Also, this
    class is used to tweak various parameters, which are global to the
    application.

    C++ includes: context.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def login(self, *args):
        """
        void
        mutrade::Context::login(Int32 userId, const String &password, String
        host, Int16 port, bool restoreState=false)

        Login to muTrade server with with userId and password.

        Parameters:
        -----------

        \c:  userId to login with

        \c:  password for user

        \c:  host ip

        \c:  port of host

        \c:  restore previous trade 
        """
        return _Context.Context_login(self, *args)

    def logout(self):
        """
        void
        mutrade::Context::logout()

        Logout from the muTrade server. 
        """
        return _Context.Context_logout(self)

    def placeOrder(self, *args):
        """
        bool
        mutrade::Context::placeOrder(const mutrade::Order &order)

        Send an order to the muTrade server. 
        """
        return _Context.Context_placeOrder(self, *args)

    def enableLogging(self, *args):
        """
        void
        mutrade::Context::enableLogging(LogLevel level=INFO)

        Enable logging of various events.

        Parameters:
        -----------

        \c:  logging level for how much log we want to generate

        These logs also go to syslog on Linux/UNIX and to Event Log on Windows

        """
        return _Context.Context_enableLogging(self, *args)

    def subscribe(self, *args):
        """
        void
        mutrade::Context::subscribe(const Instrument &t)

        Susbscribe market data for a particular instrument.

        loadInstrument must be called for the string before calling this
        method. 
        """
        return _Context.Context_subscribe(self, *args)

    def unsubscribe(self, *args):
        """
        void
        mutrade::Context::unsubscribe(const Instrument &t)

        Unsusbscribe market data for a previously subscribed instrument.

        loadInstrument must be called for the string before calling this
        method. 
        """
        return _Context.Context_unsubscribe(self, *args)

    def loadInstrument(self, *args):
        """
        void
        mutrade::Context::loadInstrument(const String &s)

        Load static data for an instrument from the muTrade server. 
        """
        return _Context.Context_loadInstrument(self, *args)

    def getInstrument(self, *args):
        """
        Instrument*
        mutrade::Context::getInstrument(const String &t) const

        Get static data for a particular instrument using symbol
        loadInstrument must be called for the string before calling this
        method. 
        """
        return _Context.Context_getInstrument(self, *args)

    __swig_getmethods__["getInstance"] = lambda x: _Context.Context_getInstance
    if _newclass:getInstance = staticmethod(_Context.Context_getInstance)
    def getContextImpl(self):
        """
        detail::ContextImpl* mutrade::Context::getContextImpl()

        Get the instance of ContextImpl class. 
        """
        return _Context.Context_getContextImpl(self)

    def getApplication(self):
        """
        Application*
        mutrade::Context::getApplication()

        Get the instance of Application class. 
        """
        return _Context.Context_getApplication(self)

    def setApplication(self, *args):
        """
        void
        mutrade::Context::setApplication(Application *) 
        """
        return _Context.Context_setApplication(self, *args)

    __swig_destroy__ = _Context.delete_Context
    __del__ = lambda self : None;
Context_swigregister = _Context.Context_swigregister
Context_swigregister(Context)

def Context_getInstance():
  return _Context.Context_getInstance()
Context_getInstance = _Context.Context_getInstance

class Trade(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trade, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """mutrade::Trade::Trade(const Trade &) """
        this = _Context.new_Trade(*args)
        try: self.this.append(this)
        except: self.this = this
    def initialize(self):
        """
        void
        mutrade::Trade::initialize() 
        """
        return _Context.Trade_initialize(self)

    def getInstrument(self):
        """
        Instrument
        mutrade::Trade::getInstrument() 
        """
        return _Context.Trade_getInstrument(self)

    def getTradeId(self):
        """
        Int64
        mutrade::Trade::getTradeId() 
        """
        return _Context.Trade_getTradeId(self)

    def getClOrdId(self):
        """
        Int64
        mutrade::Trade::getClOrdId() 
        """
        return _Context.Trade_getClOrdId(self)

    def getOrigClOrdId(self):
        """
        Int64
        mutrade::Trade::getOrigClOrdId() 
        """
        return _Context.Trade_getOrigClOrdId(self)

    def getExchangeOrderId(self):
        """
        Int64
        mutrade::Trade::getExchangeOrderId() 
        """
        return _Context.Trade_getExchangeOrderId(self)

    def getOrderMode(self):
        """
        Side
        mutrade::Trade::getOrderMode() 
        """
        return _Context.Trade_getOrderMode(self)

    def getFilledQuantity(self):
        """
        Int32
        mutrade::Trade::getFilledQuantity() 
        """
        return _Context.Trade_getFilledQuantity(self)

    def getFilledPrice(self):
        """
        Int32
        mutrade::Trade::getFilledPrice() 
        """
        return _Context.Trade_getFilledPrice(self)

    def getOrderType(self):
        """
        OrderType
        mutrade::Trade::getOrderType() 
        """
        return _Context.Trade_getOrderType(self)

    def getTradeTime(self):
        """
        Int32
        mutrade::Trade::getTradeTime() 
        """
        return _Context.Trade_getTradeTime(self)

    def setInstrument(self, *args):
        """
        void
        mutrade::Trade::setInstrument(Instrument val) 
        """
        return _Context.Trade_setInstrument(self, *args)

    def setTradeId(self, *args):
        """
        void
        mutrade::Trade::setTradeId(Int64 val) 
        """
        return _Context.Trade_setTradeId(self, *args)

    def setClOrdId(self, *args):
        """
        void
        mutrade::Trade::setClOrdId(Int64 val) 
        """
        return _Context.Trade_setClOrdId(self, *args)

    def setOrigClOrdId(self, *args):
        """
        void
        mutrade::Trade::setOrigClOrdId(Int64 val) 
        """
        return _Context.Trade_setOrigClOrdId(self, *args)

    def setExchangeOrderId(self, *args):
        """
        void
        mutrade::Trade::setExchangeOrderId(Int64 val) 
        """
        return _Context.Trade_setExchangeOrderId(self, *args)

    def setOrderMode(self, *args):
        """
        void
        mutrade::Trade::setOrderMode(Side val) 
        """
        return _Context.Trade_setOrderMode(self, *args)

    def setFilledQuantity(self, *args):
        """
        void
        mutrade::Trade::setFilledQuantity(Int32 val) 
        """
        return _Context.Trade_setFilledQuantity(self, *args)

    def setFilledPrice(self, *args):
        """
        void
        mutrade::Trade::setFilledPrice(Int32 val) 
        """
        return _Context.Trade_setFilledPrice(self, *args)

    def setOrderType(self, *args):
        """
        void
        mutrade::Trade::setOrderType(OrderType val) 
        """
        return _Context.Trade_setOrderType(self, *args)

    def setTradeTime(self, *args):
        """
        void
        mutrade::Trade::setTradeTime(Int32 val) 
        """
        return _Context.Trade_setTradeTime(self, *args)

    __swig_destroy__ = _Context.delete_Trade
    __del__ = lambda self : None;
Trade_swigregister = _Context.Trade_swigregister
Trade_swigregister(Trade)

class Position(_object):
    """
    Position class.

    This class is required for  class.

    We need to create an object of type Position before aclling
    NetPosition.

    C++ includes: position.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        mutrade::Position::Position(const Position &)

        Position class copy constructor.

        Parameters:
        -----------

        \c:   Position object to copy. 
        """
        this = _Context.new_Position(*args)
        try: self.this.append(this)
        except: self.this = this
    def initialize(self):
        """
        void
        mutrade::Position::initialize()

        Initialize class members with default values. 
        """
        return _Context.Position_initialize(self)

    def __lt__(self, *args): return _Context.Position___lt__(self, *args)
    def getQuantity(self):
        """
        Int32
        mutrade::Position::getQuantity()

        Get total quantity for current postion. 
        """
        return _Context.Position_getQuantity(self)

    def getAveragePrice(self):
        """
        Int32
        mutrade::Position::getAveragePrice()

        Get Average Price for current postion. 
        """
        return _Context.Position_getAveragePrice(self)

    def getInstrument(self):
        """
        Instrument
        mutrade::Position::getInstrument()

        Get Instrument from current postion. 
        """
        return _Context.Position_getInstrument(self)

    def getOrderMode(self):
        """
        Side
        mutrade::Position::getOrderMode()

        Get Side of current postion. 
        """
        return _Context.Position_getOrderMode(self)

    def setQuantity(self, *args):
        """
        void
        mutrade::Position::setQuantity(Int32 val)

        Set total quantity for current postion. 
        """
        return _Context.Position_setQuantity(self, *args)

    def setAveragePrice(self, *args):
        """
        void
        mutrade::Position::setAveragePrice(Int32 val)

        Set Average Price for current postion. 
        """
        return _Context.Position_setAveragePrice(self, *args)

    def setInstrument(self, *args):
        """
        void
        mutrade::Position::setInstrument(Instrument val)

        Set Instrument from current postion. 
        """
        return _Context.Position_setInstrument(self, *args)

    def setOrderType(self, *args):
        """
        void
        mutrade::Position::setOrderType(Side val)

        Set Side of current postion. 
        """
        return _Context.Position_setOrderType(self, *args)

    __swig_destroy__ = _Context.delete_Position
    __del__ = lambda self : None;
Position_swigregister = _Context.Position_swigregister
Position_swigregister(Position)

class NetPositions(_object):
    """
    NetPositions class.

    This class stores the list of all the positions which the client has
    accumulated through the trading day.

    The trades which happened before the connection was made can be
    replayed back from the server and this class will then be able to
    provide the net positions for the day.

    C++ includes: netpositions.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetPositions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetPositions, name)
    __repr__ = _swig_repr
    def getPosition(self, *args):
        """
        Position*
        mutrade::NetPositions::getPosition(Instrument instrument, Side
        orderMode)

        Get Net Positions for an Instrument and Side.

        Parameters:
        -----------

        instrument:

        side:  ( BUY/SELL ) 
        """
        return _Context.NetPositions_getPosition(self, *args)

    def update(self, *args):
        """
        int
        mutrade::NetPositions::update(ExecutionReport &report)

        Updates the position in the NetPositions.

        This method updates the positions which are receieved as executions
        from the exchange.

        The user of the API does not need to call this method. It is called by
        the API automatically when an execution is received. 
        """
        return _Context.NetPositions_update(self, *args)

    def __init__(self): 
        this = _Context.new_NetPositions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Context.delete_NetPositions
    __del__ = lambda self : None;
NetPositions_swigregister = _Context.NetPositions_swigregister
NetPositions_swigregister(NetPositions)

class TradeBook(_object):
    """
    TradeBook class.

    This class stores the list of all the trades which have happened
    during the day.

    The trades which happened before the connection was made can be
    replayed back from the server and this class will then be able to
    serve the list of all trades happened during the day.

    C++ includes: tradebook.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeBook, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TradeBook, name)
    __repr__ = _swig_repr
    def getTrades(self, *args):
        """
        TradeList*
        mutrade::TradeBook::getTrades(Int64 clOrderId)

        Get List of trades.

        Parameters:
        -----------

        clOrderId:  (client order ID generated by the server) 
        """
        return _Context.TradeBook_getTrades(self, *args)

    def update(self, *args):
        """
        int
        mutrade::TradeBook::update(ExecutionReport &report)

        Updates the trade in the TradeBook.

        This method updates the trades which are receieved as executions from
        the exchange.

        The user of the API does not need to call this method. It is called by
        the API automatically when an execution is received. 
        """
        return _Context.TradeBook_update(self, *args)

    def __init__(self): 
        this = _Context.new_TradeBook()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Context.delete_TradeBook
    __del__ = lambda self : None;
TradeBook_swigregister = _Context.TradeBook_swigregister
TradeBook_swigregister(TradeBook)

class OrderBook(_object):
    """
    OrderBook class.

    This class stores the list of all the orders which have been placed
    during the day.

    Only the orders placed during the current session will be available
    from this class. Orders placed before the connection was made will not
    be available via this class.

    C++ includes: orderbook.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderBook, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderBook, name)
    __repr__ = _swig_repr
    def getOrder(self, *args):
        """
        Order*
        mutrade::OrderBook::getOrder(Int64 clOrderId)  throw
        (std::domain_error) Get the order details.

        Parameters:
        -----------

        clOrderId:  (client order ID generated by the server) 
        """
        return _Context.OrderBook_getOrder(self, *args)

    def update(self, *args):
        """
        int
        mutrade::OrderBook::update(ExecutionReport &report, bool
        reconcileOldOrders=false)

        Updates the trade in the OrderBook.

        This method updates the order which are sent by the API. The user of
        the API does not need to call this method. It is called by the API
        automatically when an order is placed. 
        """
        return _Context.OrderBook_update(self, *args)

    def insert(self, *args):
        """
        void
        mutrade::OrderBook::insert(Order *order)

        Insterts the order in the OrderBook.

        The user of the API does not need to call this method. It is called by
        the API automatically when an execution is received. 
        """
        return _Context.OrderBook_insert(self, *args)

    def __init__(self): 
        this = _Context.new_OrderBook()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Context.delete_OrderBook
    __del__ = lambda self : None;
OrderBook_swigregister = _Context.OrderBook_swigregister
OrderBook_swigregister(OrderBook)

class Portfolio(_object):
    """
    Portfolio class.

    This class contains the portfolio for the trader/algorithm. Portfolio
    class provides OrderBook, TradeBook and Net Positions for the trader.

    C++ includes: portfolio.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Portfolio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Portfolio, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getInstance"] = lambda x: _Context.Portfolio_getInstance
    if _newclass:getInstance = staticmethod(_Context.Portfolio_getInstance)
    def insert(self, *args):
        """
        void
        mutrade::Portfolio::insert(mutrade::Order *order)

        Insterts the order in the Portfolio.

        The user of the API does not need to call this method. It is called by
        the API automatically when an execution is received. 
        """
        return _Context.Portfolio_insert(self, *args)

    def getOrderByTokenId(self, *args):
        """
        mutrade::Order* mutrade::Portfolio::getOrderByTokenId(Int32 tokenId)

        Handle Response from the server.

        The user of the API does not need to call this method. It is called by
        the API automatically when an execution is received. Handle
        Confirmations from the server

        The user of the API does not need to call this method. It is called by
        the API automatically when an execution is received. Gets Order From
        TokenId

        The user of the API does not need to call this method. It is called by
        the API automatically when an execution is received. 
        """
        return _Context.Portfolio_getOrderByTokenId(self, *args)

    def getNetPositions(self):
        """
        NetPositions& mutrade::Portfolio::getNetPositions()

        Get cumulative Net Positions. 
        """
        return _Context.Portfolio_getNetPositions(self)

    def getOrderBook(self):
        """
        OrderBook&
        mutrade::Portfolio::getOrderBook()

        Get Order Book (list of all the orders placed). 
        """
        return _Context.Portfolio_getOrderBook(self)

    def getTradeBook(self):
        """
        TradeBook&
        mutrade::Portfolio::getTradeBook()

        Get Trade Book (list of all the trades placed). 
        """
        return _Context.Portfolio_getTradeBook(self)

    __swig_destroy__ = _Context.delete_Portfolio
    __del__ = lambda self : None;
Portfolio_swigregister = _Context.Portfolio_swigregister
Portfolio_swigregister(Portfolio)

def Portfolio_getInstance():
  return _Context.Portfolio_getInstance()
Portfolio_getInstance = _Context.Portfolio_getInstance



