#ifndef MUTRADEAPI_ORDER_BOOK_H
#define MUTRADEAPI_ORDER_BOOK_H

#include <map>
#include <stdexcept>
#include "order.h"
#include "types.h"

namespace mutrade {

  /**
   * \anchor OrderBook
   * \brief OrderBook class
   *
   * This class stores the list of all the orders which have been placed
   * during the day.
   *
   * \note Only the orders placed during the current session will be
   * available from this class. Orders placed before the connection was made
   * will not be available via this class.
   *
   */

  class OrderBook
  {
    typedef std::map<Int64, Order*> OrderBookMap;
    /**
     * Each ClOrderId is mapped to an object of the Order class
     */
    typedef std::map<Int64, Order*>::iterator OrderBookMapIter;
    typedef std::map<Int64, Order*>::const_iterator OrderBookMapCIter;
    
  public:
    
    /**
     * \brief Get the order details
     *
     * \param clOrderId (client order ID generated by the server)
     */

    Order* getOrder(Int64 clOrderId) throw (std::domain_error);
    
    /**
     * \brief Updates the trade in the OrderBook
     *
     * This method updates the order which are sent by the API.
     * The user of the API does not need to call this method. It is
     * called by the API automatically when an order is placed.
     */
    int update(ExecutionReport& report, bool reconcileOldOrders = false);

    /**
     * \brief Insterts the order in the OrderBook
     *
     * \note The user of the API does not need to call this
     * method. It is called by the API automatically when an execution is
     * received.
     */
    void insert(Order* order);
    

  private:
    OrderBookMap _orderBook;
  };

} // namespace mutrade

#endif
