/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ExecutionReport : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ExecutionReport(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ExecutionReport obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ExecutionReport() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ContextModulePINVOKE.delete_ExecutionReport(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public ExecutionReport() : this(ContextModulePINVOKE.new_ExecutionReport__SWIG_0(), true) {
  }

  public ExecutionReport(string buf) : this(ContextModulePINVOKE.new_ExecutionReport__SWIG_1(buf), true) {
  }

  public void initialize() {
    ContextModulePINVOKE.ExecutionReport_initialize(swigCPtr);
  }

  public long getClOrderId() {
    long ret = ContextModulePINVOKE.ExecutionReport_getClOrderId(swigCPtr);
    return ret;
  }

  public long getExchangeOrderId() {
    long ret = ContextModulePINVOKE.ExecutionReport_getExchangeOrderId(swigCPtr);
    return ret;
  }

  public long getSymbolId() {
    long ret = ContextModulePINVOKE.ExecutionReport_getSymbolId(swigCPtr);
    return ret;
  }

  public int getLastFillQuantity() {
    int ret = ContextModulePINVOKE.ExecutionReport_getLastFillQuantity(swigCPtr);
    return ret;
  }

  public int getLastFillPrice() {
    int ret = ContextModulePINVOKE.ExecutionReport_getLastFillPrice(swigCPtr);
    return ret;
  }

  public int getExchangeEntryTime() {
    int ret = ContextModulePINVOKE.ExecutionReport_getExchangeEntryTime(swigCPtr);
    return ret;
  }

  public int getExchangeModifyTime() {
    int ret = ContextModulePINVOKE.ExecutionReport_getExchangeModifyTime(swigCPtr);
    return ret;
  }

  public int getStrategyId() {
    int ret = ContextModulePINVOKE.ExecutionReport_getStrategyId(swigCPtr);
    return ret;
  }

  public int getClientId() {
    int ret = ContextModulePINVOKE.ExecutionReport_getClientId(swigCPtr);
    return ret;
  }

  public int getLimitPrice() {
    int ret = ContextModulePINVOKE.ExecutionReport_getLimitPrice(swigCPtr);
    return ret;
  }

  public OrderStatus getOrderStatus() {
    OrderStatus ret = (OrderStatus)ContextModulePINVOKE.ExecutionReport_getOrderStatus(swigCPtr);
    return ret;
  }

  public OrderMode getOrderMode() {
    OrderMode ret = (OrderMode)ContextModulePINVOKE.ExecutionReport_getOrderMode(swigCPtr);
    return ret;
  }

  public int getOrderQuantity() {
    int ret = ContextModulePINVOKE.ExecutionReport_getOrderQuantity(swigCPtr);
    return ret;
  }

  public int getOrderPrice() {
    int ret = ContextModulePINVOKE.ExecutionReport_getOrderPrice(swigCPtr);
    return ret;
  }

  public int getIOCCanceledQuantity() {
    int ret = ContextModulePINVOKE.ExecutionReport_getIOCCanceledQuantity(swigCPtr);
    return ret;
  }

  public long getOriginalClOrderId() {
    long ret = ContextModulePINVOKE.ExecutionReport_getOriginalClOrderId(swigCPtr);
    return ret;
  }

  public long getConfirmationTimeSeconds() {
    long ret = ContextModulePINVOKE.ExecutionReport_getConfirmationTimeSeconds(swigCPtr);
    return ret;
  }

  public long getConfirmationTimeMicroSeconds() {
    long ret = ContextModulePINVOKE.ExecutionReport_getConfirmationTimeMicroSeconds(swigCPtr);
    return ret;
  }

  public byte getIsOffline() {
    byte ret = ContextModulePINVOKE.ExecutionReport_getIsOffline(swigCPtr);
    return ret;
  }

  public long getSequenceNumber() {
    long ret = ContextModulePINVOKE.ExecutionReport_getSequenceNumber(swigCPtr);
    return ret;
  }

  public long getTradeId() {
    long ret = ContextModulePINVOKE.ExecutionReport_getTradeId(swigCPtr);
    return ret;
  }

  public int getErrorCode() {
    int ret = ContextModulePINVOKE.ExecutionReport_getErrorCode(swigCPtr);
    return ret;
  }

  public int getReasonText() {
    int ret = ContextModulePINVOKE.ExecutionReport_getReasonText(swigCPtr);
    return ret;
  }

  public byte getUnknownOrder() {
    byte ret = ContextModulePINVOKE.ExecutionReport_getUnknownOrder(swigCPtr);
    return ret;
  }

  public string getInstrumentName() {
    string ret = ContextModulePINVOKE.ExecutionReport_getInstrumentName(swigCPtr);
    return ret;
  }

  public void setClOrderId(long clOrderId) {
    ContextModulePINVOKE.ExecutionReport_setClOrderId(swigCPtr, clOrderId);
  }

  public void setExchangeOrderId(long exchangeOrderId) {
    ContextModulePINVOKE.ExecutionReport_setExchangeOrderId(swigCPtr, exchangeOrderId);
  }

  public void setSymbolId(long symbolId) {
    ContextModulePINVOKE.ExecutionReport_setSymbolId(swigCPtr, symbolId);
  }

  public void setLastFillQuantity(int qty) {
    ContextModulePINVOKE.ExecutionReport_setLastFillQuantity(swigCPtr, qty);
  }

  public void setLastFillPrice(int price) {
    ContextModulePINVOKE.ExecutionReport_setLastFillPrice(swigCPtr, price);
  }

  public void setExchangeEntryTime(int exchangeEntryTime) {
    ContextModulePINVOKE.ExecutionReport_setExchangeEntryTime(swigCPtr, exchangeEntryTime);
  }

  public void setExchangeModifyTime(int exchangeModifyTime) {
    ContextModulePINVOKE.ExecutionReport_setExchangeModifyTime(swigCPtr, exchangeModifyTime);
  }

  public void setStrategyId(int strategyId) {
    ContextModulePINVOKE.ExecutionReport_setStrategyId(swigCPtr, strategyId);
  }

  public void setClientId(int clientId) {
    ContextModulePINVOKE.ExecutionReport_setClientId(swigCPtr, clientId);
  }

  public void setLimitPrice(int limitPrice) {
    ContextModulePINVOKE.ExecutionReport_setLimitPrice(swigCPtr, limitPrice);
  }

  public void setOrderStatus(OrderStatus orderStatus) {
    ContextModulePINVOKE.ExecutionReport_setOrderStatus(swigCPtr, (int)orderStatus);
  }

  public void setOrderMode(OrderMode orderMode) {
    ContextModulePINVOKE.ExecutionReport_setOrderMode(swigCPtr, (int)orderMode);
  }

  public void setOrderQuantity(int quantity) {
    ContextModulePINVOKE.ExecutionReport_setOrderQuantity(swigCPtr, quantity);
  }

  public void setOrderPrice(int price) {
    ContextModulePINVOKE.ExecutionReport_setOrderPrice(swigCPtr, price);
  }

  public void setIOCCanceledQuantity(int quantity) {
    ContextModulePINVOKE.ExecutionReport_setIOCCanceledQuantity(swigCPtr, quantity);
  }

  public void setOriginalClOrderId(long originalClOrderId) {
    ContextModulePINVOKE.ExecutionReport_setOriginalClOrderId(swigCPtr, originalClOrderId);
  }

  public void setConfirmationTimeSeconds(long seconds) {
    ContextModulePINVOKE.ExecutionReport_setConfirmationTimeSeconds(swigCPtr, seconds);
  }

  public void setConfirmationTimeMicroSeconds(long microSeconds) {
    ContextModulePINVOKE.ExecutionReport_setConfirmationTimeMicroSeconds(swigCPtr, microSeconds);
  }

  public void setIsOffline(byte isOffline) {
    ContextModulePINVOKE.ExecutionReport_setIsOffline(swigCPtr, isOffline);
  }

  public void setSequenceNumber(long sequenceNumber) {
    ContextModulePINVOKE.ExecutionReport_setSequenceNumber(swigCPtr, sequenceNumber);
  }

  public void setTradeId(long tradeId) {
    ContextModulePINVOKE.ExecutionReport_setTradeId(swigCPtr, tradeId);
  }

  public void setErrorCode(int errorCode) {
    ContextModulePINVOKE.ExecutionReport_setErrorCode(swigCPtr, errorCode);
  }

  public void setReasonText(int reasonText) {
    ContextModulePINVOKE.ExecutionReport_setReasonText(swigCPtr, reasonText);
  }

  public void setUnknownOrder(byte unknownOrder) {
    ContextModulePINVOKE.ExecutionReport_setUnknownOrder(swigCPtr, unknownOrder);
  }

  public void setInstrumentName(string instrumentName) {
    ContextModulePINVOKE.ExecutionReport_setInstrumentName(swigCPtr, instrumentName);
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void dump() {
    ContextModulePINVOKE.ExecutionReport_dump(swigCPtr);
  }

  public void dumpCSV(SWIGTYPE_p_std__ofstream csvFile) {
    ContextModulePINVOKE.ExecutionReport_dumpCSV(swigCPtr, SWIGTYPE_p_std__ofstream.getCPtr(csvFile));
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public int serialize(string buf) {
    int ret = ContextModulePINVOKE.ExecutionReport_serialize(swigCPtr, buf);
    return ret;
  }

}
