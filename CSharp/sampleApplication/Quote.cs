/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Quote : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Quote(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Quote obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Quote() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ContextModulePINVOKE.delete_Quote(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Quote() : this(ContextModulePINVOKE.new_Quote__SWIG_0(), true) {
  }

  public Quote(Quote arg0) : this(ContextModulePINVOKE.new_Quote__SWIG_1(Quote.getCPtr(arg0)), true) {
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSymbolId(long val) {
    ContextModulePINVOKE.Quote_setSymbolId(swigCPtr, val);
  }

  public void setNummberOfTrades(long val) {
    ContextModulePINVOKE.Quote_setNummberOfTrades(swigCPtr, val);
  }

  public void setVolume(long val) {
    ContextModulePINVOKE.Quote_setVolume(swigCPtr, val);
  }

  public void setValue(long val) {
    ContextModulePINVOKE.Quote_setValue(swigCPtr, val);
  }

  public void setLastTradePrice(long val) {
    ContextModulePINVOKE.Quote_setLastTradePrice(swigCPtr, val);
  }

  public void setLastTradeQty(long val) {
    ContextModulePINVOKE.Quote_setLastTradeQty(swigCPtr, val);
  }

  public void setOpenPrice(long val) {
    ContextModulePINVOKE.Quote_setOpenPrice(swigCPtr, val);
  }

  public void setClosePrice(long val) {
    ContextModulePINVOKE.Quote_setClosePrice(swigCPtr, val);
  }

  public void setHighPrice(long val) {
    ContextModulePINVOKE.Quote_setHighPrice(swigCPtr, val);
  }

  public void setLowPrice(long val) {
    ContextModulePINVOKE.Quote_setLowPrice(swigCPtr, val);
  }

  public void setTotalBidQty(long val) {
    ContextModulePINVOKE.Quote_setTotalBidQty(swigCPtr, val);
  }

  public void setTotalAskQty(long val) {
    ContextModulePINVOKE.Quote_setTotalAskQty(swigCPtr, val);
  }

  public void setLowerCktLimit(long val) {
    ContextModulePINVOKE.Quote_setLowerCktLimit(swigCPtr, val);
  }

  public void setUpperCktLimit(long val) {
    ContextModulePINVOKE.Quote_setUpperCktLimit(swigCPtr, val);
  }

  public void setDepth(byte val) {
    ContextModulePINVOKE.Quote_setDepth(swigCPtr, val);
  }

  public void setBidPrice(SWIGTYPE_p_long_long val) {
    ContextModulePINVOKE.Quote_setBidPrice(swigCPtr, SWIGTYPE_p_long_long.getCPtr(val));
  }

  public void setBidQty(SWIGTYPE_p_long_long val) {
    ContextModulePINVOKE.Quote_setBidQty(swigCPtr, SWIGTYPE_p_long_long.getCPtr(val));
  }

  public void setAskPrice(SWIGTYPE_p_long_long val) {
    ContextModulePINVOKE.Quote_setAskPrice(swigCPtr, SWIGTYPE_p_long_long.getCPtr(val));
  }

  public void setAskQty(SWIGTYPE_p_long_long val) {
    ContextModulePINVOKE.Quote_setAskQty(swigCPtr, SWIGTYPE_p_long_long.getCPtr(val));
  }

  public long getSymbolId() {
    long ret = ContextModulePINVOKE.Quote_getSymbolId(swigCPtr);
    return ret;
  }

  public long getNumberOfTrades() {
    long ret = ContextModulePINVOKE.Quote_getNumberOfTrades(swigCPtr);
    return ret;
  }

  public long getVolume() {
    long ret = ContextModulePINVOKE.Quote_getVolume(swigCPtr);
    return ret;
  }

  public long getValue() {
    long ret = ContextModulePINVOKE.Quote_getValue(swigCPtr);
    return ret;
  }

  public long getLastTradePrice() {
    long ret = ContextModulePINVOKE.Quote_getLastTradePrice(swigCPtr);
    return ret;
  }

  public long getLastTradeQty() {
    long ret = ContextModulePINVOKE.Quote_getLastTradeQty(swigCPtr);
    return ret;
  }

  public long getOpenPrice() {
    long ret = ContextModulePINVOKE.Quote_getOpenPrice(swigCPtr);
    return ret;
  }

  public long getClosePrice() {
    long ret = ContextModulePINVOKE.Quote_getClosePrice(swigCPtr);
    return ret;
  }

  public long getHighPrice() {
    long ret = ContextModulePINVOKE.Quote_getHighPrice(swigCPtr);
    return ret;
  }

  public long getLowPrice() {
    long ret = ContextModulePINVOKE.Quote_getLowPrice(swigCPtr);
    return ret;
  }

  public long getTotalBidQty() {
    long ret = ContextModulePINVOKE.Quote_getTotalBidQty(swigCPtr);
    return ret;
  }

  public long getTotalAskQty() {
    long ret = ContextModulePINVOKE.Quote_getTotalAskQty(swigCPtr);
    return ret;
  }

  public long getLowerCktLimit() {
    long ret = ContextModulePINVOKE.Quote_getLowerCktLimit(swigCPtr);
    return ret;
  }

  public long getUpperCktLimit() {
    long ret = ContextModulePINVOKE.Quote_getUpperCktLimit(swigCPtr);
    return ret;
  }

  public byte getDepth() {
    byte ret = ContextModulePINVOKE.Quote_getDepth(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_long_long getBidPrice() {
    IntPtr cPtr = ContextModulePINVOKE.Quote_getBidPrice(swigCPtr);
    SWIGTYPE_p_long_long ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_long_long(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_long_long getBidQty() {
    IntPtr cPtr = ContextModulePINVOKE.Quote_getBidQty(swigCPtr);
    SWIGTYPE_p_long_long ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_long_long(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_long_long getAskPrice() {
    IntPtr cPtr = ContextModulePINVOKE.Quote_getAskPrice(swigCPtr);
    SWIGTYPE_p_long_long ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_long_long(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_long_long getAskQty() {
    IntPtr cPtr = ContextModulePINVOKE.Quote_getAskQty(swigCPtr);
    SWIGTYPE_p_long_long ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_long_long(cPtr, false);
    return ret;
  }

}
