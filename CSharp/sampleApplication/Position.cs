/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Position : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Position(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Position obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Position() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ContextModulePINVOKE.delete_Position(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Position(Instrument instrument) : this(ContextModulePINVOKE.new_Position__SWIG_0(Instrument.getCPtr(instrument)), true) {
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public Position(Position arg0) : this(ContextModulePINVOKE.new_Position__SWIG_1(Position.getCPtr(arg0)), true) {
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void initialize() {
    ContextModulePINVOKE.Position_initialize(swigCPtr);
  }

  public int getQuantity() {
    int ret = ContextModulePINVOKE.Position_getQuantity(swigCPtr);
    return ret;
  }

  public int getAveragePrice() {
    int ret = ContextModulePINVOKE.Position_getAveragePrice(swigCPtr);
    return ret;
  }

  public Instrument getInstrument() {
    Instrument ret = new Instrument(ContextModulePINVOKE.Position_getInstrument(swigCPtr), true);
    return ret;
  }

  public Side getOrderMode() {
    Side ret = (Side)ContextModulePINVOKE.Position_getOrderMode(swigCPtr);
    return ret;
  }

  public void setQuantity(int val) {
    ContextModulePINVOKE.Position_setQuantity(swigCPtr, val);
  }

  public void setAveragePrice(int val) {
    ContextModulePINVOKE.Position_setAveragePrice(swigCPtr, val);
  }

  public void setInstrument(Instrument val) {
    ContextModulePINVOKE.Position_setInstrument(swigCPtr, Instrument.getCPtr(val));
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOrderType(Side val) {
    ContextModulePINVOKE.Position_setOrderType(swigCPtr, (int)val);
  }

}
