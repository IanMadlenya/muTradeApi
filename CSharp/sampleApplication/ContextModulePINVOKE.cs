/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

class ContextModulePINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("ContextModule.dll", EntryPoint="SWIGRegisterExceptionCallbacks_ContextModule")]
    public static extern void SWIGRegisterExceptionCallbacks_ContextModule(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("ContextModule.dll", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_ContextModule")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_ContextModule(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_ContextModule(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_ContextModule(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(ContextModulePINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(ContextModulePINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("ContextModule.dll", EntryPoint="SWIGRegisterStringCallback_ContextModule")]
    public static extern void SWIGRegisterStringCallback_ContextModule(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_ContextModule(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static ContextModulePINVOKE() {
  }


  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_empty")]
  public static extern bool TradeQue_empty(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_TradeQue__SWIG_0")]
  public static extern IntPtr new_TradeQue__SWIG_0();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_TradeQue__SWIG_1")]
  public static extern IntPtr new_TradeQue__SWIG_1(uint jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_TradeQue__SWIG_2")]
  public static extern IntPtr new_TradeQue__SWIG_2(uint jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_TradeQue__SWIG_3")]
  public static extern IntPtr new_TradeQue__SWIG_3(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_TradeQue")]
  public static extern void delete_TradeQue(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_assign")]
  public static extern void TradeQue_assign(HandleRef jarg1, uint jarg2, HandleRef jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_swap")]
  public static extern void TradeQue_swap(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_size")]
  public static extern uint TradeQue_size(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_max_size")]
  public static extern uint TradeQue_max_size(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_resize__SWIG_0")]
  public static extern void TradeQue_resize__SWIG_0(HandleRef jarg1, uint jarg2, HandleRef jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_resize__SWIG_1")]
  public static extern void TradeQue_resize__SWIG_1(HandleRef jarg1, uint jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_front")]
  public static extern IntPtr TradeQue_front(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_back")]
  public static extern IntPtr TradeQue_back(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_push_front")]
  public static extern void TradeQue_push_front(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_push_back")]
  public static extern void TradeQue_push_back(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_pop_front")]
  public static extern void TradeQue_pop_front(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_pop_back")]
  public static extern void TradeQue_pop_back(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_clear")]
  public static extern void TradeQue_clear(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_getitem")]
  public static extern IntPtr TradeQue_getitem(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_setitem")]
  public static extern void TradeQue_setitem(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_delitem")]
  public static extern void TradeQue_delitem(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_getslice")]
  public static extern IntPtr TradeQue_getslice(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_setslice")]
  public static extern void TradeQue_setslice(HandleRef jarg1, int jarg2, int jarg3, HandleRef jarg4);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeQue_delslice")]
  public static extern void TradeQue_delslice(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_longToString")]
  public static extern string longToString(long jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_ExecutionReport__SWIG_0")]
  public static extern IntPtr new_ExecutionReport__SWIG_0();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_ExecutionReport__SWIG_1")]
  public static extern IntPtr new_ExecutionReport__SWIG_1(string jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_initialize")]
  public static extern void ExecutionReport_initialize(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getClOrderId")]
  public static extern long ExecutionReport_getClOrderId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getExchangeOrderId")]
  public static extern long ExecutionReport_getExchangeOrderId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getSymbolId")]
  public static extern long ExecutionReport_getSymbolId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getLastFillQuantity")]
  public static extern int ExecutionReport_getLastFillQuantity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getLastFillPrice")]
  public static extern int ExecutionReport_getLastFillPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getExchangeEntryTime")]
  public static extern int ExecutionReport_getExchangeEntryTime(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getExchangeModifyTime")]
  public static extern int ExecutionReport_getExchangeModifyTime(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getStrategyId")]
  public static extern int ExecutionReport_getStrategyId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getClientId")]
  public static extern int ExecutionReport_getClientId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getLimitPrice")]
  public static extern int ExecutionReport_getLimitPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getOrderStatus")]
  public static extern int ExecutionReport_getOrderStatus(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getOrderMode")]
  public static extern int ExecutionReport_getOrderMode(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getOrderQuantity")]
  public static extern int ExecutionReport_getOrderQuantity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getOrderPrice")]
  public static extern int ExecutionReport_getOrderPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getIOCCanceledQuantity")]
  public static extern int ExecutionReport_getIOCCanceledQuantity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getOriginalClOrderId")]
  public static extern long ExecutionReport_getOriginalClOrderId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getConfirmationTimeSeconds")]
  public static extern long ExecutionReport_getConfirmationTimeSeconds(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getConfirmationTimeMicroSeconds")]
  public static extern long ExecutionReport_getConfirmationTimeMicroSeconds(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getIsOffline")]
  public static extern byte ExecutionReport_getIsOffline(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getSequenceNumber")]
  public static extern long ExecutionReport_getSequenceNumber(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getTradeId")]
  public static extern long ExecutionReport_getTradeId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getErrorCode")]
  public static extern int ExecutionReport_getErrorCode(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getReasonText")]
  public static extern int ExecutionReport_getReasonText(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getUnknownOrder")]
  public static extern byte ExecutionReport_getUnknownOrder(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_getInstrumentName")]
  public static extern string ExecutionReport_getInstrumentName(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setClOrderId")]
  public static extern void ExecutionReport_setClOrderId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setExchangeOrderId")]
  public static extern void ExecutionReport_setExchangeOrderId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setSymbolId")]
  public static extern void ExecutionReport_setSymbolId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setLastFillQuantity")]
  public static extern void ExecutionReport_setLastFillQuantity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setLastFillPrice")]
  public static extern void ExecutionReport_setLastFillPrice(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setExchangeEntryTime")]
  public static extern void ExecutionReport_setExchangeEntryTime(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setExchangeModifyTime")]
  public static extern void ExecutionReport_setExchangeModifyTime(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setStrategyId")]
  public static extern void ExecutionReport_setStrategyId(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setClientId")]
  public static extern void ExecutionReport_setClientId(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setLimitPrice")]
  public static extern void ExecutionReport_setLimitPrice(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setOrderStatus")]
  public static extern void ExecutionReport_setOrderStatus(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setOrderMode")]
  public static extern void ExecutionReport_setOrderMode(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setOrderQuantity")]
  public static extern void ExecutionReport_setOrderQuantity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setOrderPrice")]
  public static extern void ExecutionReport_setOrderPrice(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setIOCCanceledQuantity")]
  public static extern void ExecutionReport_setIOCCanceledQuantity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setOriginalClOrderId")]
  public static extern void ExecutionReport_setOriginalClOrderId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setConfirmationTimeSeconds")]
  public static extern void ExecutionReport_setConfirmationTimeSeconds(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setConfirmationTimeMicroSeconds")]
  public static extern void ExecutionReport_setConfirmationTimeMicroSeconds(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setIsOffline")]
  public static extern void ExecutionReport_setIsOffline(HandleRef jarg1, byte jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setSequenceNumber")]
  public static extern void ExecutionReport_setSequenceNumber(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setTradeId")]
  public static extern void ExecutionReport_setTradeId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setErrorCode")]
  public static extern void ExecutionReport_setErrorCode(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setReasonText")]
  public static extern void ExecutionReport_setReasonText(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setUnknownOrder")]
  public static extern void ExecutionReport_setUnknownOrder(HandleRef jarg1, byte jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_setInstrumentName")]
  public static extern void ExecutionReport_setInstrumentName(HandleRef jarg1, string jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_dump")]
  public static extern void ExecutionReport_dump(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_dumpCSV")]
  public static extern void ExecutionReport_dumpCSV(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionReport_serialize")]
  public static extern int ExecutionReport_serialize(HandleRef jarg1, string jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_ExecutionReport")]
  public static extern void delete_ExecutionReport(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_ExecutionResponse__SWIG_0")]
  public static extern IntPtr new_ExecutionResponse__SWIG_0();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_ExecutionResponse__SWIG_1")]
  public static extern IntPtr new_ExecutionResponse__SWIG_1(string jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionResponse_dump")]
  public static extern void ExecutionResponse_dump(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionResponse_getClOrderId")]
  public static extern ulong ExecutionResponse_getClOrderId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionResponse_getTransactionType")]
  public static extern byte ExecutionResponse_getTransactionType(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionResponse_getResponseType")]
  public static extern byte ExecutionResponse_getResponseType(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionResponse_getTokenId")]
  public static extern uint ExecutionResponse_getTokenId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionResponse_setClOrderId")]
  public static extern void ExecutionResponse_setClOrderId(HandleRef jarg1, ulong jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionResponse_setTransactionType")]
  public static extern void ExecutionResponse_setTransactionType(HandleRef jarg1, byte jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionResponse_setResponseType")]
  public static extern void ExecutionResponse_setResponseType(HandleRef jarg1, byte jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_ExecutionResponse_setTokenId")]
  public static extern void ExecutionResponse_setTokenId(HandleRef jarg1, uint jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_ExecutionResponse")]
  public static extern void delete_ExecutionResponse(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_AbstractLogger_log")]
  public static extern void AbstractLogger_log(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_AbstractLogger_getLevel")]
  public static extern int AbstractLogger_getLevel(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_AbstractLogger_setLogLevel")]
  public static extern void AbstractLogger_setLogLevel(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_AbstractLogger_getLogLevel")]
  public static extern int AbstractLogger_getLogLevel(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_AbstractLogger")]
  public static extern IntPtr new_AbstractLogger();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_AbstractLogger")]
  public static extern void delete_AbstractLogger(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_AbstractLogger_director_connect")]
  public static extern void AbstractLogger_director_connect(HandleRef jarg1, AbstractLogger.SwigDelegateAbstractLogger_0 delegate0, AbstractLogger.SwigDelegateAbstractLogger_1 delegate1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Logger_getInstance")]
  public static extern IntPtr Logger_getInstance();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Logger_setLogLevel")]
  public static extern void Logger_setLogLevel(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Logger_log")]
  public static extern void Logger_log(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_Logger")]
  public static extern void delete_Logger(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Order")]
  public static extern IntPtr new_Order();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getClientId")]
  public static extern int Order_getClientId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getTransactionType")]
  public static extern int Order_getTransactionType(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getClOrdId")]
  public static extern long Order_getClOrdId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getOrigClOrdId")]
  public static extern long Order_getOrigClOrdId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getExchangeOrderId")]
  public static extern string Order_getExchangeOrderId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getSymbol")]
  public static extern string Order_getSymbol(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getOrderMode")]
  public static extern int Order_getOrderMode(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getQuantity")]
  public static extern int Order_getQuantity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getDisclosedQuantity")]
  public static extern int Order_getDisclosedQuantity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getFilledQuantity")]
  public static extern int Order_getFilledQuantity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getOldQuantity")]
  public static extern int Order_getOldQuantity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getPrice")]
  public static extern int Order_getPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getStopPrice")]
  public static extern int Order_getStopPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getSecurityType")]
  public static extern int Order_getSecurityType(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getOrderValidity")]
  public static extern int Order_getOrderValidity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getOrderType")]
  public static extern int Order_getOrderType(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getOrderStatus")]
  public static extern int Order_getOrderStatus(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getExchangeEntryTime")]
  public static extern int Order_getExchangeEntryTime(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_getExchangeModifyTime")]
  public static extern int Order_getExchangeModifyTime(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setClientId")]
  public static extern void Order_setClientId(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setTransactionType")]
  public static extern void Order_setTransactionType(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setClOrdId")]
  public static extern void Order_setClOrdId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setOrigClOrdId")]
  public static extern void Order_setOrigClOrdId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setExchangeOrderId")]
  public static extern void Order_setExchangeOrderId(HandleRef jarg1, string jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setSymbol")]
  public static extern void Order_setSymbol(HandleRef jarg1, string jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setOrderMode")]
  public static extern void Order_setOrderMode(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setQuantity")]
  public static extern void Order_setQuantity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setDisclosedQuantity")]
  public static extern void Order_setDisclosedQuantity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setFilledQuantity")]
  public static extern void Order_setFilledQuantity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setOldQuantity")]
  public static extern void Order_setOldQuantity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setPrice")]
  public static extern void Order_setPrice(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setStopPrice")]
  public static extern void Order_setStopPrice(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setSecurityType")]
  public static extern void Order_setSecurityType(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setOrderValidity")]
  public static extern void Order_setOrderValidity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setOrderType")]
  public static extern void Order_setOrderType(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setOrderStatus")]
  public static extern void Order_setOrderStatus(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setExchangeEntryTime")]
  public static extern void Order_setExchangeEntryTime(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_setExchangeModifyTime")]
  public static extern void Order_setExchangeModifyTime(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_initialize")]
  public static extern void Order_initialize(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Order_dumpOrder")]
  public static extern void Order_dumpOrder(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_Order")]
  public static extern void delete_Order(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Instrument__SWIG_0")]
  public static extern IntPtr new_Instrument__SWIG_0();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Instrument__SWIG_1")]
  public static extern IntPtr new_Instrument__SWIG_1(string jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Instrument_getInstrumentType")]
  public static extern int Instrument_getInstrumentType(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Instrument_getStrikePrice")]
  public static extern long Instrument_getStrikePrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Instrument_getSeries")]
  public static extern string Instrument_getSeries(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Instrument_getLotSize")]
  public static extern int Instrument_getLotSize(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Instrument_getTickSize")]
  public static extern int Instrument_getTickSize(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Instrument_getOptionType")]
  public static extern int Instrument_getOptionType(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Instrument_getInstrumentName")]
  public static extern string Instrument_getInstrumentName(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_Instrument")]
  public static extern void delete_Instrument(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Quote__SWIG_0")]
  public static extern IntPtr new_Quote__SWIG_0();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Quote__SWIG_1")]
  public static extern IntPtr new_Quote__SWIG_1(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setSymbolId")]
  public static extern void Quote_setSymbolId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setNummberOfTrades")]
  public static extern void Quote_setNummberOfTrades(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setVolume")]
  public static extern void Quote_setVolume(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setValue")]
  public static extern void Quote_setValue(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setLastTradePrice")]
  public static extern void Quote_setLastTradePrice(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setLastTradeQty")]
  public static extern void Quote_setLastTradeQty(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setOpenPrice")]
  public static extern void Quote_setOpenPrice(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setClosePrice")]
  public static extern void Quote_setClosePrice(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setHighPrice")]
  public static extern void Quote_setHighPrice(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setLowPrice")]
  public static extern void Quote_setLowPrice(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setTotalBidQty")]
  public static extern void Quote_setTotalBidQty(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setTotalAskQty")]
  public static extern void Quote_setTotalAskQty(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setLowerCktLimit")]
  public static extern void Quote_setLowerCktLimit(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setUpperCktLimit")]
  public static extern void Quote_setUpperCktLimit(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setDepth")]
  public static extern void Quote_setDepth(HandleRef jarg1, byte jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setBidPrice")]
  public static extern void Quote_setBidPrice(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setBidQty")]
  public static extern void Quote_setBidQty(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setAskPrice")]
  public static extern void Quote_setAskPrice(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_setAskQty")]
  public static extern void Quote_setAskQty(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getSymbolId")]
  public static extern long Quote_getSymbolId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getNumberOfTrades")]
  public static extern long Quote_getNumberOfTrades(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getVolume")]
  public static extern long Quote_getVolume(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getValue")]
  public static extern long Quote_getValue(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getLastTradePrice")]
  public static extern long Quote_getLastTradePrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getLastTradeQty")]
  public static extern long Quote_getLastTradeQty(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getOpenPrice")]
  public static extern long Quote_getOpenPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getClosePrice")]
  public static extern long Quote_getClosePrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getHighPrice")]
  public static extern long Quote_getHighPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getLowPrice")]
  public static extern long Quote_getLowPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getTotalBidQty")]
  public static extern long Quote_getTotalBidQty(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getTotalAskQty")]
  public static extern long Quote_getTotalAskQty(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getLowerCktLimit")]
  public static extern long Quote_getLowerCktLimit(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getUpperCktLimit")]
  public static extern long Quote_getUpperCktLimit(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getDepth")]
  public static extern byte Quote_getDepth(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getBidPrice")]
  public static extern IntPtr Quote_getBidPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getBidQty")]
  public static extern IntPtr Quote_getBidQty(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getAskPrice")]
  public static extern IntPtr Quote_getAskPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Quote_getAskQty")]
  public static extern IntPtr Quote_getAskQty(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_Quote")]
  public static extern void delete_Quote(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_MarketData__SWIG_0")]
  public static extern IntPtr new_MarketData__SWIG_0();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_MarketData__SWIG_1")]
  public static extern IntPtr new_MarketData__SWIG_1(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getInstrument")]
  public static extern IntPtr MarketData_getInstrument(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getLastPrice")]
  public static extern int MarketData_getLastPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getLastQty")]
  public static extern int MarketData_getLastQty(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getLastTime")]
  public static extern int MarketData_getLastTime(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getTotalQty")]
  public static extern int MarketData_getTotalQty(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getDepth")]
  public static extern int MarketData_getDepth(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getPrice")]
  public static extern int MarketData_getPrice(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getQty")]
  public static extern int MarketData_getQty(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getRank")]
  public static extern int MarketData_getRank(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getCount")]
  public static extern bool MarketData_getCount(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_hasQty")]
  public static extern bool MarketData_hasQty(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getAvgPrice")]
  public static extern int MarketData_getAvgPrice(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getQtyForAvgPrice")]
  public static extern int MarketData_getQtyForAvgPrice(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getAvgPriceForQty")]
  public static extern int MarketData_getAvgPriceForQty(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getQtyForWorstPrice")]
  public static extern int MarketData_getQtyForWorstPrice(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getWorstPriceForQty")]
  public static extern int MarketData_getWorstPriceForQty(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getDayOpen")]
  public static extern int MarketData_getDayOpen(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getDayHigh")]
  public static extern int MarketData_getDayHigh(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getDayLow")]
  public static extern int MarketData_getDayLow(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_MarketData_getDayClose")]
  public static extern int MarketData_getDayClose(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_MarketData")]
  public static extern void delete_MarketData(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_Application")]
  public static extern void delete_Application(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onTick")]
  public static extern void Application_onTick(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onTickSwigExplicitApplication")]
  public static extern void Application_onTickSwigExplicitApplication(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onLogin")]
  public static extern void Application_onLogin(HandleRef jarg1, bool jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onLoginSwigExplicitApplication")]
  public static extern void Application_onLoginSwigExplicitApplication(HandleRef jarg1, bool jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onLogout")]
  public static extern void Application_onLogout(HandleRef jarg1, bool jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onLogoutSwigExplicitApplication")]
  public static extern void Application_onLogoutSwigExplicitApplication(HandleRef jarg1, bool jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onExecutionReport")]
  public static extern void Application_onExecutionReport(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onExecutionReportSwigExplicitApplication")]
  public static extern void Application_onExecutionReportSwigExplicitApplication(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onLoadInstrumentEnd")]
  public static extern void Application_onLoadInstrumentEnd(HandleRef jarg1, string jarg2, bool jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_onLoadInstrumentEndSwigExplicitApplication")]
  public static extern void Application_onLoadInstrumentEndSwigExplicitApplication(HandleRef jarg1, string jarg2, bool jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Application")]
  public static extern IntPtr new_Application();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Application_director_connect")]
  public static extern void Application_director_connect(HandleRef jarg1, Application.SwigDelegateApplication_0 delegate0, Application.SwigDelegateApplication_1 delegate1, Application.SwigDelegateApplication_2 delegate2, Application.SwigDelegateApplication_3 delegate3, Application.SwigDelegateApplication_4 delegate4);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_login__SWIG_0")]
  public static extern void Context_login__SWIG_0(HandleRef jarg1, int jarg2, string jarg3, string jarg4, short jarg5, bool jarg6);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_login__SWIG_1")]
  public static extern void Context_login__SWIG_1(HandleRef jarg1, int jarg2, string jarg3, string jarg4, short jarg5);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_logout")]
  public static extern void Context_logout(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_placeOrder")]
  public static extern bool Context_placeOrder(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_enableLogging__SWIG_0")]
  public static extern void Context_enableLogging__SWIG_0(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_enableLogging__SWIG_1")]
  public static extern void Context_enableLogging__SWIG_1(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_subscribe")]
  public static extern void Context_subscribe(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_unsubscribe")]
  public static extern void Context_unsubscribe(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_loadInstrument")]
  public static extern void Context_loadInstrument(HandleRef jarg1, string jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_getInstrument")]
  public static extern IntPtr Context_getInstrument(HandleRef jarg1, string jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_getInstance")]
  public static extern IntPtr Context_getInstance();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_getContextImpl")]
  public static extern IntPtr Context_getContextImpl(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_getApplication")]
  public static extern IntPtr Context_getApplication(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Context_setApplication")]
  public static extern void Context_setApplication(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_Context")]
  public static extern void delete_Context(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Trade__SWIG_0")]
  public static extern IntPtr new_Trade__SWIG_0(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Trade__SWIG_1")]
  public static extern IntPtr new_Trade__SWIG_1(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_initialize")]
  public static extern void Trade_initialize(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getInstrument")]
  public static extern IntPtr Trade_getInstrument(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getTradeId")]
  public static extern long Trade_getTradeId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getClOrdId")]
  public static extern long Trade_getClOrdId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getOrigClOrdId")]
  public static extern long Trade_getOrigClOrdId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getExchangeOrderId")]
  public static extern long Trade_getExchangeOrderId(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getOrderMode")]
  public static extern int Trade_getOrderMode(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getFilledQuantity")]
  public static extern int Trade_getFilledQuantity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getFilledPrice")]
  public static extern int Trade_getFilledPrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getOrderType")]
  public static extern int Trade_getOrderType(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_getTradeTime")]
  public static extern int Trade_getTradeTime(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setInstrument")]
  public static extern void Trade_setInstrument(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setTradeId")]
  public static extern void Trade_setTradeId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setClOrdId")]
  public static extern void Trade_setClOrdId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setOrigClOrdId")]
  public static extern void Trade_setOrigClOrdId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setExchangeOrderId")]
  public static extern void Trade_setExchangeOrderId(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setOrderMode")]
  public static extern void Trade_setOrderMode(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setFilledQuantity")]
  public static extern void Trade_setFilledQuantity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setFilledPrice")]
  public static extern void Trade_setFilledPrice(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setOrderType")]
  public static extern void Trade_setOrderType(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Trade_setTradeTime")]
  public static extern void Trade_setTradeTime(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_Trade")]
  public static extern void delete_Trade(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Position__SWIG_0")]
  public static extern IntPtr new_Position__SWIG_0(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_Position__SWIG_1")]
  public static extern IntPtr new_Position__SWIG_1(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Position_initialize")]
  public static extern void Position_initialize(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Position_getQuantity")]
  public static extern int Position_getQuantity(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Position_getAveragePrice")]
  public static extern int Position_getAveragePrice(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Position_getInstrument")]
  public static extern IntPtr Position_getInstrument(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Position_getOrderMode")]
  public static extern int Position_getOrderMode(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Position_setQuantity")]
  public static extern void Position_setQuantity(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Position_setAveragePrice")]
  public static extern void Position_setAveragePrice(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Position_setInstrument")]
  public static extern void Position_setInstrument(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Position_setOrderType")]
  public static extern void Position_setOrderType(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_Position")]
  public static extern void delete_Position(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_NetPositions_getPosition")]
  public static extern IntPtr NetPositions_getPosition(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_NetPositions_update")]
  public static extern int NetPositions_update(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_NetPositions")]
  public static extern IntPtr new_NetPositions();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_NetPositions")]
  public static extern void delete_NetPositions(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeBook_getTrades")]
  public static extern IntPtr TradeBook_getTrades(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeBook_getTradeQue")]
  public static extern IntPtr TradeBook_getTradeQue(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_TradeBook_update")]
  public static extern int TradeBook_update(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_TradeBook")]
  public static extern IntPtr new_TradeBook();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_TradeBook")]
  public static extern void delete_TradeBook(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_OrderBook_getOrder")]
  public static extern IntPtr OrderBook_getOrder(HandleRef jarg1, long jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_OrderBook_update__SWIG_0")]
  public static extern int OrderBook_update__SWIG_0(HandleRef jarg1, HandleRef jarg2, bool jarg3);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_OrderBook_update__SWIG_1")]
  public static extern int OrderBook_update__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_OrderBook_insert")]
  public static extern void OrderBook_insert(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_new_OrderBook")]
  public static extern IntPtr new_OrderBook();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_OrderBook")]
  public static extern void delete_OrderBook(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Portfolio_getInstance")]
  public static extern IntPtr Portfolio_getInstance();

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Portfolio_insert")]
  public static extern void Portfolio_insert(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Portfolio_getOrderByTokenId")]
  public static extern IntPtr Portfolio_getOrderByTokenId(HandleRef jarg1, int jarg2);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Portfolio_getNetPositions")]
  public static extern IntPtr Portfolio_getNetPositions(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Portfolio_getOrderBook")]
  public static extern IntPtr Portfolio_getOrderBook(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_Portfolio_getTradeBook")]
  public static extern IntPtr Portfolio_getTradeBook(HandleRef jarg1);

  [DllImport("ContextModule.dll", EntryPoint="CSharp_delete_Portfolio")]
  public static extern void delete_Portfolio(HandleRef jarg1);
}
