/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Trade : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Trade(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Trade obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Trade() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ContextModulePINVOKE.delete_Trade(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Trade(Instrument arg0) : this(ContextModulePINVOKE.new_Trade__SWIG_0(Instrument.getCPtr(arg0)), true) {
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public Trade(Trade arg0) : this(ContextModulePINVOKE.new_Trade__SWIG_1(Trade.getCPtr(arg0)), true) {
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void initialize() {
    ContextModulePINVOKE.Trade_initialize(swigCPtr);
  }

  public Instrument getInstrument() {
    Instrument ret = new Instrument(ContextModulePINVOKE.Trade_getInstrument(swigCPtr), true);
    return ret;
  }

  public long getTradeId() {
    long ret = ContextModulePINVOKE.Trade_getTradeId(swigCPtr);
    return ret;
  }

  public long getClOrdId() {
    long ret = ContextModulePINVOKE.Trade_getClOrdId(swigCPtr);
    return ret;
  }

  public long getOrigClOrdId() {
    long ret = ContextModulePINVOKE.Trade_getOrigClOrdId(swigCPtr);
    return ret;
  }

  public long getExchangeOrderId() {
    long ret = ContextModulePINVOKE.Trade_getExchangeOrderId(swigCPtr);
    return ret;
  }

  public Side getOrderMode() {
    Side ret = (Side)ContextModulePINVOKE.Trade_getOrderMode(swigCPtr);
    return ret;
  }

  public int getFilledQuantity() {
    int ret = ContextModulePINVOKE.Trade_getFilledQuantity(swigCPtr);
    return ret;
  }

  public int getFilledPrice() {
    int ret = ContextModulePINVOKE.Trade_getFilledPrice(swigCPtr);
    return ret;
  }

  public OrderType getOrderType() {
    OrderType ret = (OrderType)ContextModulePINVOKE.Trade_getOrderType(swigCPtr);
    return ret;
  }

  public int getTradeTime() {
    int ret = ContextModulePINVOKE.Trade_getTradeTime(swigCPtr);
    return ret;
  }

  public void setInstrument(Instrument val) {
    ContextModulePINVOKE.Trade_setInstrument(swigCPtr, Instrument.getCPtr(val));
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTradeId(long val) {
    ContextModulePINVOKE.Trade_setTradeId(swigCPtr, val);
  }

  public void setClOrdId(long val) {
    ContextModulePINVOKE.Trade_setClOrdId(swigCPtr, val);
  }

  public void setOrigClOrdId(long val) {
    ContextModulePINVOKE.Trade_setOrigClOrdId(swigCPtr, val);
  }

  public void setExchangeOrderId(long val) {
    ContextModulePINVOKE.Trade_setExchangeOrderId(swigCPtr, val);
  }

  public void setOrderMode(Side val) {
    ContextModulePINVOKE.Trade_setOrderMode(swigCPtr, (int)val);
  }

  public void setFilledQuantity(int val) {
    ContextModulePINVOKE.Trade_setFilledQuantity(swigCPtr, val);
  }

  public void setFilledPrice(int val) {
    ContextModulePINVOKE.Trade_setFilledPrice(swigCPtr, val);
  }

  public void setOrderType(OrderType val) {
    ContextModulePINVOKE.Trade_setOrderType(swigCPtr, (int)val);
  }

  public void setTradeTime(int val) {
    ContextModulePINVOKE.Trade_setTradeTime(swigCPtr, val);
  }

}
