/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Application : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Application(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Application obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Application() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ContextModulePINVOKE.delete_Application(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void onTick(MarketData arg0) {
    if (SwigDerivedClassHasMethod("onTick", swigMethodTypes0)) ContextModulePINVOKE.Application_onTickSwigExplicitApplication(swigCPtr, MarketData.getCPtr(arg0)); else ContextModulePINVOKE.Application_onTick(swigCPtr, MarketData.getCPtr(arg0));
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onLogin(bool status) {
    if (SwigDerivedClassHasMethod("onLogin", swigMethodTypes1)) ContextModulePINVOKE.Application_onLoginSwigExplicitApplication(swigCPtr, status); else ContextModulePINVOKE.Application_onLogin(swigCPtr, status);
  }

  public virtual void onLogout(bool status) {
    if (SwigDerivedClassHasMethod("onLogout", swigMethodTypes2)) ContextModulePINVOKE.Application_onLogoutSwigExplicitApplication(swigCPtr, status); else ContextModulePINVOKE.Application_onLogout(swigCPtr, status);
  }

  public virtual void onExecutionReport(ExecutionReport report) {
    if (SwigDerivedClassHasMethod("onExecutionReport", swigMethodTypes3)) ContextModulePINVOKE.Application_onExecutionReportSwigExplicitApplication(swigCPtr, ExecutionReport.getCPtr(report)); else ContextModulePINVOKE.Application_onExecutionReport(swigCPtr, ExecutionReport.getCPtr(report));
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onLoadInstrumentEnd(string instrumentName, bool success) {
    if (SwigDerivedClassHasMethod("onLoadInstrumentEnd", swigMethodTypes4)) ContextModulePINVOKE.Application_onLoadInstrumentEndSwigExplicitApplication(swigCPtr, instrumentName, success); else ContextModulePINVOKE.Application_onLoadInstrumentEnd(swigCPtr, instrumentName, success);
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public Application() : this(ContextModulePINVOKE.new_Application(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onTick", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateApplication_0(SwigDirectoronTick);
    if (SwigDerivedClassHasMethod("onLogin", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateApplication_1(SwigDirectoronLogin);
    if (SwigDerivedClassHasMethod("onLogout", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateApplication_2(SwigDirectoronLogout);
    if (SwigDerivedClassHasMethod("onExecutionReport", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateApplication_3(SwigDirectoronExecutionReport);
    if (SwigDerivedClassHasMethod("onLoadInstrumentEnd", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateApplication_4(SwigDirectoronLoadInstrumentEnd);
    ContextModulePINVOKE.Application_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Application));
    return hasDerivedMethod;
  }

  private void SwigDirectoronTick(IntPtr arg0) {
    onTick(new MarketData(arg0, false));
  }

  private void SwigDirectoronLogin(bool status) {
    onLogin(status);
  }

  private void SwigDirectoronLogout(bool status) {
    onLogout(status);
  }

  private void SwigDirectoronExecutionReport(IntPtr report) {
    onExecutionReport(new ExecutionReport(report, false));
  }

  private void SwigDirectoronLoadInstrumentEnd(string instrumentName, bool success) {
    onLoadInstrumentEnd(instrumentName, success);
  }

  public delegate void SwigDelegateApplication_0(IntPtr arg0);
  public delegate void SwigDelegateApplication_1(bool status);
  public delegate void SwigDelegateApplication_2(bool status);
  public delegate void SwigDelegateApplication_3(IntPtr report);
  public delegate void SwigDelegateApplication_4(string instrumentName, bool success);

  private SwigDelegateApplication_0 swigDelegate0;
  private SwigDelegateApplication_1 swigDelegate1;
  private SwigDelegateApplication_2 swigDelegate2;
  private SwigDelegateApplication_3 swigDelegate3;
  private SwigDelegateApplication_4 swigDelegate4;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(MarketData) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(ExecutionReport) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(string), typeof(bool) };
}
