/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Order : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Order(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Order obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Order() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ContextModulePINVOKE.delete_Order(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Order() : this(ContextModulePINVOKE.new_Order(), true) {
  }

  public int getClientId() {
    int ret = ContextModulePINVOKE.Order_getClientId(swigCPtr);
    return ret;
  }

  public TransactionType getTransactionType() {
    TransactionType ret = (TransactionType)ContextModulePINVOKE.Order_getTransactionType(swigCPtr);
    return ret;
  }

  public long getClOrdId() {
    long ret = ContextModulePINVOKE.Order_getClOrdId(swigCPtr);
    return ret;
  }

  public long getOrigClOrdId() {
    long ret = ContextModulePINVOKE.Order_getOrigClOrdId(swigCPtr);
    return ret;
  }

  public string getExchangeOrderId() {
    string ret = ContextModulePINVOKE.Order_getExchangeOrderId(swigCPtr);
    return ret;
  }

  public string getSymbol() {
    string ret = ContextModulePINVOKE.Order_getSymbol(swigCPtr);
    return ret;
  }

  public Side getOrderMode() {
    Side ret = (Side)ContextModulePINVOKE.Order_getOrderMode(swigCPtr);
    return ret;
  }

  public int getQuantity() {
    int ret = ContextModulePINVOKE.Order_getQuantity(swigCPtr);
    return ret;
  }

  public int getDisclosedQuantity() {
    int ret = ContextModulePINVOKE.Order_getDisclosedQuantity(swigCPtr);
    return ret;
  }

  public int getFilledQuantity() {
    int ret = ContextModulePINVOKE.Order_getFilledQuantity(swigCPtr);
    return ret;
  }

  public int getOldQuantity() {
    int ret = ContextModulePINVOKE.Order_getOldQuantity(swigCPtr);
    return ret;
  }

  public int getPrice() {
    int ret = ContextModulePINVOKE.Order_getPrice(swigCPtr);
    return ret;
  }

  public int getStopPrice() {
    int ret = ContextModulePINVOKE.Order_getStopPrice(swigCPtr);
    return ret;
  }

  public InstrumentType getSecurityType() {
    InstrumentType ret = (InstrumentType)ContextModulePINVOKE.Order_getSecurityType(swigCPtr);
    return ret;
  }

  public TimeInForce getOrderValidity() {
    TimeInForce ret = (TimeInForce)ContextModulePINVOKE.Order_getOrderValidity(swigCPtr);
    return ret;
  }

  public OrderType getOrderType() {
    OrderType ret = (OrderType)ContextModulePINVOKE.Order_getOrderType(swigCPtr);
    return ret;
  }

  public OrderStatus getOrderStatus() {
    OrderStatus ret = (OrderStatus)ContextModulePINVOKE.Order_getOrderStatus(swigCPtr);
    return ret;
  }

  public int getExchangeEntryTime() {
    int ret = ContextModulePINVOKE.Order_getExchangeEntryTime(swigCPtr);
    return ret;
  }

  public int getExchangeModifyTime() {
    int ret = ContextModulePINVOKE.Order_getExchangeModifyTime(swigCPtr);
    return ret;
  }

  public void setClientId(int val) {
    ContextModulePINVOKE.Order_setClientId(swigCPtr, val);
  }

  public void setTransactionType(TransactionType val) {
    ContextModulePINVOKE.Order_setTransactionType(swigCPtr, (int)val);
  }

  public void setClOrdId(long val) {
    ContextModulePINVOKE.Order_setClOrdId(swigCPtr, val);
  }

  public void setOrigClOrdId(long val) {
    ContextModulePINVOKE.Order_setOrigClOrdId(swigCPtr, val);
  }

  public void setExchangeOrderId(string val) {
    ContextModulePINVOKE.Order_setExchangeOrderId(swigCPtr, val);
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSymbol(string val) {
    ContextModulePINVOKE.Order_setSymbol(swigCPtr, val);
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOrderMode(Side val) {
    ContextModulePINVOKE.Order_setOrderMode(swigCPtr, (int)val);
  }

  public void setQuantity(int val) {
    ContextModulePINVOKE.Order_setQuantity(swigCPtr, val);
  }

  public void setDisclosedQuantity(int val) {
    ContextModulePINVOKE.Order_setDisclosedQuantity(swigCPtr, val);
  }

  public void setFilledQuantity(int val) {
    ContextModulePINVOKE.Order_setFilledQuantity(swigCPtr, val);
  }

  public void setOldQuantity(int val) {
    ContextModulePINVOKE.Order_setOldQuantity(swigCPtr, val);
  }

  public void setPrice(int val) {
    ContextModulePINVOKE.Order_setPrice(swigCPtr, val);
  }

  public void setStopPrice(int val) {
    ContextModulePINVOKE.Order_setStopPrice(swigCPtr, val);
  }

  public void setSecurityType(InstrumentType val) {
    ContextModulePINVOKE.Order_setSecurityType(swigCPtr, (int)val);
  }

  public void setOrderValidity(TimeInForce val) {
    ContextModulePINVOKE.Order_setOrderValidity(swigCPtr, (int)val);
  }

  public void setOrderType(OrderType val) {
    ContextModulePINVOKE.Order_setOrderType(swigCPtr, (int)val);
  }

  public void setOrderStatus(OrderStatus val) {
    ContextModulePINVOKE.Order_setOrderStatus(swigCPtr, (int)val);
  }

  public void setExchangeEntryTime(int val) {
    ContextModulePINVOKE.Order_setExchangeEntryTime(swigCPtr, val);
  }

  public void setExchangeModifyTime(int val) {
    ContextModulePINVOKE.Order_setExchangeModifyTime(swigCPtr, val);
  }

  public void initialize() {
    ContextModulePINVOKE.Order_initialize(swigCPtr);
  }

  public void dumpOrder() {
    ContextModulePINVOKE.Order_dumpOrder(swigCPtr);
  }

}
