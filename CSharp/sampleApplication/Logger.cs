/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Logger : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Logger(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Logger obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Logger() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ContextModulePINVOKE.delete_Logger(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static Logger getInstance() {
    IntPtr cPtr = ContextModulePINVOKE.Logger_getInstance();
    Logger ret = (cPtr == IntPtr.Zero) ? null : new Logger(cPtr, false);
    return ret;
  }

  public void setLogLevel(LogLevel level) {
    ContextModulePINVOKE.Logger_setLogLevel(swigCPtr, (int)level);
  }

  public void log(LogLevel level, string message) {
    ContextModulePINVOKE.Logger_log(swigCPtr, (int)level, message);
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

}
