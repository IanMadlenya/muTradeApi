/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Context : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Context(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Context obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Context() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ContextModulePINVOKE.delete_Context(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public void login(int userId, string password, string host, short port, bool restoreState) {
    ContextModulePINVOKE.Context_login__SWIG_0(swigCPtr, userId, password, host, port, restoreState);
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void login(int userId, string password, string host, short port) {
    ContextModulePINVOKE.Context_login__SWIG_1(swigCPtr, userId, password, host, port);
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void logout() {
    ContextModulePINVOKE.Context_logout(swigCPtr);
  }

  public bool placeOrder(Order order) {
    bool ret = ContextModulePINVOKE.Context_placeOrder(swigCPtr, Order.getCPtr(order));
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void enableLogging(LogLevel level) {
    ContextModulePINVOKE.Context_enableLogging__SWIG_0(swigCPtr, (int)level);
  }

  public void enableLogging() {
    ContextModulePINVOKE.Context_enableLogging__SWIG_1(swigCPtr);
  }

  public void subscribe(Instrument t) {
    ContextModulePINVOKE.Context_subscribe(swigCPtr, Instrument.getCPtr(t));
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void unsubscribe(Instrument t) {
    ContextModulePINVOKE.Context_unsubscribe(swigCPtr, Instrument.getCPtr(t));
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadInstrument(string s) {
    ContextModulePINVOKE.Context_loadInstrument(swigCPtr, s);
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public Instrument getInstrument(string t) {
    IntPtr cPtr = ContextModulePINVOKE.Context_getInstrument(swigCPtr, t);
    Instrument ret = (cPtr == IntPtr.Zero) ? null : new Instrument(cPtr, false);
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Context getInstance() {
    IntPtr cPtr = ContextModulePINVOKE.Context_getInstance();
    Context ret = (cPtr == IntPtr.Zero) ? null : new Context(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_mutrade__detail__ContextImpl getContextImpl() {
    IntPtr cPtr = ContextModulePINVOKE.Context_getContextImpl(swigCPtr);
    SWIGTYPE_p_mutrade__detail__ContextImpl ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_mutrade__detail__ContextImpl(cPtr, false);
    return ret;
  }

  public Application getApplication() {
    IntPtr cPtr = ContextModulePINVOKE.Context_getApplication(swigCPtr);
    Application ret = (cPtr == IntPtr.Zero) ? null : new Application(cPtr, false);
    return ret;
  }

  public void setApplication(Application arg0) {
    ContextModulePINVOKE.Context_setApplication(swigCPtr, Application.getCPtr(arg0));
  }

}
