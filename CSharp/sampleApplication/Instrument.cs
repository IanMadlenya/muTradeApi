/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Instrument : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Instrument(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Instrument obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Instrument() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ContextModulePINVOKE.delete_Instrument(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Instrument() : this(ContextModulePINVOKE.new_Instrument__SWIG_0(), true) {
  }

  public Instrument(string identifier) : this(ContextModulePINVOKE.new_Instrument__SWIG_1(identifier), true) {
    if (ContextModulePINVOKE.SWIGPendingException.Pending) throw ContextModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public InstrumentType getInstrumentType() {
    InstrumentType ret = (InstrumentType)ContextModulePINVOKE.Instrument_getInstrumentType(swigCPtr);
    return ret;
  }

  public long getStrikePrice() {
    long ret = ContextModulePINVOKE.Instrument_getStrikePrice(swigCPtr);
    return ret;
  }

  public string getSeries() {
    string ret = ContextModulePINVOKE.Instrument_getSeries(swigCPtr);
    return ret;
  }

  public int getLotSize() {
    int ret = ContextModulePINVOKE.Instrument_getLotSize(swigCPtr);
    return ret;
  }

  public int getTickSize() {
    int ret = ContextModulePINVOKE.Instrument_getTickSize(swigCPtr);
    return ret;
  }

  public OptionType getOptionType() {
    OptionType ret = (OptionType)ContextModulePINVOKE.Instrument_getOptionType(swigCPtr);
    return ret;
  }

  public string getInstrumentName() {
    string ret = ContextModulePINVOKE.Instrument_getInstrumentName(swigCPtr);
    return ret;
  }

}
